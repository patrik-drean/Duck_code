[
{
  "model": "home.category",
  "pk": 1,
  "fields": {
    "name": "Python",
    "url": "python",
    "filename": null,
    "create_date": "2018-03-23T20:32:32.404",
    "last_modified_date": "2018-03-23T20:32:56.366"
  }
},
{
  "model": "home.category",
  "pk": 2,
  "fields": {
    "name": "Deployment",
    "url": "deployment",
    "filename": null,
    "create_date": "2018-03-23T20:32:32.404",
    "last_modified_date": "2018-03-23T20:32:56.366"
  }
},
{
  "model": "home.category",
  "pk": 3,
  "fields": {
    "name": "Soft Skills",
    "url": "soft_skils",
    "filename": null,
    "create_date": "2018-03-23T20:32:32.404",
    "last_modified_date": "2018-03-23T20:32:56.366"
  }
},
{
  "model": "home.category",
  "pk": 4,
  "fields": {
    "name": "JavaScript",
    "url": "javascript",
    "filename": null,
    "create_date": "2018-04-20T20:32:32.404",
    "last_modified_date": "2018-04-20T20:32:56.366"
  }
},
{
  "model": "home.category",
  "pk": 5,
  "fields": {
    "name": "Testing",
    "url": "testing",
    "filename": null,
    "create_date": "2018-04-28T20:32:32.404",
    "last_modified_date": "2018-04-28T20:32:56.366"
  }
},
# {
#   "model": "home.blog",
#   "pk": 1,
#   "fields": {
#     "title": "AWS: Somewhere in the Cloud",
#     "url": "aws_somewhere_in_the_cloud",
#     "description": "So it turns out that the cloud is somewhere on the ground. Who would've thought of that?",
#     "content": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Sed arcu non odio euismod lacinia at. Ipsum nunc aliquet bibendum enim facilisis gravida neque convallis. Tellus mauris a diam maecenas sed enim. Velit sed ullamcorper morbi tincidunt. Suspendisse potenti nullam ac tortor vitae. Velit sed ullamcorper morbi tincidunt ornare. Egestas erat imperdiet sed euismod nisi porta lorem mollis. Sit amet commodo nulla facilisi. Ac auctor augue mauris augue neque gravida. Diam quam nulla porttitor massa id. Massa vitae tortor condimentum lacinia quis. Ipsum a arcu cursus vitae congue. Enim nulla aliquet porttitor lacus luctus accumsan tortor posuere. Justo donec enim diam vulputate ut pharetra sit.",
#     "create_date": "2018-03-22T17:31:29.037",
#     "last_modified_date": "2018-03-22T17:31:29.037",
#     "filename": "server.jpg",
#     "alt_text": "deploying to a server",
#     "top_post": true,
#     "category": 2
#   }
# },
# {
#   "model": "home.blog",
#   "pk": 2,
#   "fields": {
#     "title": "Reaching Your Way to the Top",
#     "url": "reaching_your_way_to_the_top",
#     "description": "Sometimes after climbing the stairs for so long, you forget where you're heading",
#     "content": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Sed arcu non odio euismod lacinia at. Ipsum nunc aliquet bibendum enim facilisis gravida neque convallis. Tellus mauris a diam maecenas sed enim. Velit sed ullamcorper morbi tincidunt. Suspendisse potenti nullam ac tortor vitae. Velit sed ullamcorper morbi tincidunt ornare. Egestas erat imperdiet sed euismod nisi porta lorem mollis. Sit amet commodo nulla facilisi. Ac auctor augue mauris augue neque gravida. Diam quam nulla porttitor massa id. Massa vitae tortor condimentum lacinia quis. Ipsum a arcu cursus vitae congue. Enim nulla aliquet porttitor lacus luctus accumsan tortor posuere. Justo donec enim diam vulputate ut pharetra sit.",
#     "create_date": "2018-03-23T05:32:55.758",
#     "last_modified_date": "2018-03-23T05:32:55.758",
#     "filename": "skyscraper.jpg",
#     "alt_text": "high skyscraper",
#     "top_post": true,
#     "category": 6
#   }
# },
# {
#   "model": "home.blog",
#   "pk": 3,
#   "fields": {
#     "title": "How to Con + cat + enate",
#     "url": "how_to_concatenate",
#     "description": "This is something basic we all learn at fast, but is it really that easy?",
#     "content": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Sed arcu non odio euismod lacinia at. Ipsum nunc aliquet bibendum enim facilisis gravida neque convallis. Tellus mauris a diam maecenas sed enim. Velit sed ullamcorper morbi tincidunt. Suspendisse potenti nullam ac tortor vitae. Velit sed ullamcorper morbi tincidunt ornare. Egestas erat imperdiet sed euismod nisi porta lorem mollis. Sit amet commodo nulla facilisi. Ac auctor augue mauris augue neque gravida. Diam quam nulla porttitor massa id. Massa vitae tortor condimentum lacinia quis. Ipsum a arcu cursus vitae congue. Enim nulla aliquet porttitor lacus luctus accumsan tortor posuere. Justo donec enim diam vulputate ut pharetra sit.",
#     "create_date": "2018-03-23T06:32:55.758",
#     "last_modified_date": "2018-03-23T06:32:55.758",
#     "filename": "tiger_how_to_concatenate.jpg",
#     "alt_text": "Tiger - how to concatenate",
#     "top_post": true,
#     "category": 1
#   }
# },
{
  "model": "home.blog",
  "pk": 1,
  "fields": {
    "title": "Deploy to Heroku with Dependencies in Django",
    "url": "how-to-deploy-to-heroku",
    "description": "It's easy to deploy to a site like Heroku when you follow the standard procedure. What happens when you're using a custom framework?",
    "content": "
                    <p>Programming already has its fair share of bugs and headaches. When it comes to
                  deploying a project this pain only multiplies. This is a walkthrough on how to deploy
                  to Heroku when dependencies(e.g., custom frameworks, libraries, etc.) are required for your
                  project. Using <a href='http://django-mako-plus.readthedocs.io/about.html' target='_blank'>
                  Django-Mako-Plus</a>, a custom python framework, we will show how you can deploy your
                  project with a framework that isn't officially supported by Heroku.
                </p>
                <h2>Initial Setup</h2>

                  <p>
                  <ul>
                    <li>
                      Sign up for a
                      <a href='https://signup.heroku.com/dc' target='_blank'>Heroku</a> account
                    </li>
                    <li>
                      Setup up
                      <a href='https://help.github.com/articles/set-up-git/' target='_blank'>git</a>
                      in your project
                    </li>
                    <li>
                      Install
                      <a href='http://www.postgresqltutorial.com/install-postgresql/' target='_blank'>
                              postgresql
                          </a>
                    </li>
                    <li>
                      Run the following in terminal (Learn about pip
                      <a href='http://www.pythonforbeginners.com/pip/' target='_blank'>here</a>):
                    </li>
                  </ul>
                  <figure>
                    <pre>
                         <code class='language-python' contenteditable spellcheck='false' >pip install pipenv</code>
                         </pre>
                  </figure>
                </p>

                <h2 class='small_margin'>Download Heroku tools</h2>
                <p> The tools can be found
                  <a href='https://devcenter.heroku.com/articles/getting-started-with-python#set-up'
                    target='_blank'> here</a>.
                    Download the appropriate package for your machine (i.e., Windows, Mac, etc.)
                </p>
                <p>Once downloaded, login to your heroku account in terminal. </p>

                <figure>
                 <pre>
                 <code class='language-python' contenteditable spellcheck='false' >heroku login</code>
                 </pre>
                 </figure>

                 <p>The following prompt should appear.</p>

                 <figure>
                  <pre>
                  <code class='language-python line-numbers' contenteditable spellcheck='false' >
              Enter your Heroku credentials:\n
               Email: myemail@domain.com\n
               Password: ********** </code>
                  </pre>
                  </figure>

                  <h2 class='small_margin'>Install Heroku to the Project</h2>
                  <p>Once you have git installed in your project, you can create a Heroku app.</p>
                  <figure>
                 <pre>
                 <code class='language-python' contenteditable spellcheck='false' >heroku create myNewApp</code>
                 </pre>
                 </figure>
                 <p>In this case I named my app 'myNewApp'. If no name is indicated, Heroku
                 automatically assigns a random name.</p>

                 <h2>Define a Procfile</h2>
                 <p>The
                   <a href='https://devcenter.heroku.com/articles/getting-started-with-python#define-a-procfile'
                   target='_blank'>Procfile</a>
                    declares what command should be run to start your app. It's an empty text file
                    we create (with no extention) in the root of our project. It has one line of code.
                  </p>
                  <figure>
                      <pre>
                      <code class='language-python' contenteditable spellcheck='false' >web: gunicorn myProjectName.wsgi --log-file -</code>
                      </pre>
                      </figure>
                  <p>
                    Be sure to update it to your project name. In this case, my Django project
                    is called 'myProjectName'.
                  </p>


                  <h2>Define a Pipfile</h2>
                  <p>
                    This step is crucial. A Pipfile is used by Heroku to pip install all the
                    necessary packages onto the Heroku server so that your app can run online
                    as well as it does locally. We create this file in the root of the project as
                    a text file (with no extension). Here is an example of what should be included
                    in the Pipfile.
                  </p>
                  <figure>
                      <pre>
                      <code class='language-python line-numbers' contenteditable spellcheck='false'>
                      [[source]]\n
                      url = \"https://pypi.python.org/simple\"\n
                      verify_ssl = true\n\n
                      [packages]\n
                      django = \"*\"\n
                      dj-database-url = \"*\" \n
                      psycopg2 = \"*\" \n
                      gunicorn = \"*\" \n
                      whitenoise = \"*\" \n
                      django-mako-plus = \"*\" \n\n
                      [requires] \n
                      python_version = \"3.6\"
               </code>
                      </pre>
                      </figure>
                      <p>An explanation of critical packages:</p>
                      <p class='p_indent'>django, dj-database-url, psycopg2 - these are standard packages in Django.</p>
                      <p class='p_indent'>
                        <a href='http://gunicorn.org' target='_blank'>gunicorn</a> -
                        This helps integrate Django projects into a web server.
                      </p>
                      <p class='p_indent'>
                        <a href='http://whitenoise.evans.io/en/stable/' target='_blank'>whitenoise</a> -
                        This helps translate static link work in the Heroku server folder.
                      </p>
                      <p class='p_indent'>
                        django-mako-plus - The custom framework package.
                      </p>
                      <p>
                        It's important to note that the \"*\" indicates the most current update of
                        that package. This can be hardcorded to a specific version (e.g., \"==3.2\").
                      </p>

                      <h2>How to View Your Current Packages in Your Project</h2>
                      <p>
                         This command in the termnial displays all the packages currently installed
                         in your environment.
                      </p>
                      <figure>
                          <pre>
                          <code class='language-python' contenteditable spellcheck='false' >pip freeze</code>
                          </pre>
                      </figure>
                      <p>
                        This outputs the packages into a text file.
                      </p>
                      <figure>
                          <pre>
                          <code class='language-python' contenteditable spellcheck='false' >pip freeze > myTextFile.txt</code>
                          </pre>
                      </figure>
                      <p>
                        You can then look through your installed packages and include any necessary ones in your Pipfile under the [packages] section.
                      </p>

                      <h2>Create Pipfile.lock</h2>
                      Once the Pipfile is created correctly, run the following in the terminal. This will lock in your packages so Heroku can install them when you deploy.
                      <figure>
                          <pre>
                          <code class='language-python' contenteditable spellcheck='false' >pipenv lock</code>
                          </pre>
                      </figure>
                      <p class='note'>NOTE: you may need deactivate your virtual environment first.</p>

                      <h2>Change settings.py</h2>
                      <p>Update allowed hosts to the following. In this case, my domain name is
                      myWebsiteDomain.com.</p>
                      <figure>
                          <pre>
                          <code class='language-python' contenteditable spellcheck='false' >ALLOWED_HOSTS = ['myWebsiteDomain.com']</code>
                          </pre>
                      </figure>
                      <p>This allows any web server to access your project.</p>
                     <figure>
                       <pre>
                       <code class='language-python' contenteditable spellcheck='false' >ALLOWED_HOSTS = ['*']</code>
                       </pre>
                     </figure>
                     <p>Include whitenoise in the middleware.</p>
                     <figure>
                       <pre>
                       <code class='language-python line-numbers' contenteditable spellcheck='false' >
                       MIDDLEWARE = [\n
                       . . .\n
                       'whitenoise.middleware.WhiteNoiseMiddleware',\n
                ]
                </code></pre>
                     </figure>

                     <h2>Ready to Deploy? Me too.</h2>
                     <figure>
                       <pre>
                       <code class='language-python' contenteditable spellcheck='false' >git push heroku master</code>
                       </pre>
                     </figure>
                     <p class='note'>
                       NOTE: Be sure you've committed all of your changes. Also be sure you're committing
                       on master.
                     </p>

                     <h2>Create a PostgreSQL Database</h2>
                     <p>
                       Create a free PostgreSQL database on Heroku's server.
                     </p>
                     <figure>
                         <pre>
                         <code class='language-python' contenteditable spellcheck='false' >heroku addons</code>
                         </pre>
                     </figure>
                     <p>
                       Check the status of your database.
                     </p>
                     <figure>
                         <pre>
                         <code class='language-python' contenteditable spellcheck='false' >heroku pg</code>
                         </pre>
                     </figure>

                     <h2 class='small_margin'>Update settings.py for the Database</h2>
                     <p>This should be included right after the database definition.
                       It's important to note that it's not necessary to remove your database
                       definition. Commit this and push it to the Heroku server.
                     </p>
                     <figure>
                         <pre>
                         <code class='language-python line-numbers' contenteditable spellcheck='false' >
                         import dj_database_url \n
                         db_from_env = dj_database_url.config() \n
                         DATABASES['default'].update(db_from_env)</code>
                         </pre>
                   </figure>

                   <h2 class='small_margin'>Run Database Migrations on Heroku</h2>
                   <figure>
                 <pre>
                 <code class='language-python line-numbers' contenteditable spellcheck='false' >
                 heroku run python manage.py makemigrations myAppName \n
                 heroku run python manage.py migrate </code>
                 </pre>
               </figure>
               </div>

               <h2 class='small_margin'>The Finish Line</h2>
               <figure>
                 <pre>
                 <code class='language-python' contenteditable spellcheck='false' >heroku open</code>
                 </pre>
               </figure>
                 <h2 id='reference_header' >References</h2>
                 <a class='align-center' href='https://devcenter.heroku.com/articles/getting-started-with-python#introduction'>
                   https://devcenter.heroku.com/articles/getting-started-with-python#introduction
                 </a>
    ",
    "create_date": "2018-03-23T17:31:29.037",
    "last_modified_date": "2018-03-23T17:31:29.037",
    "filename": "heroku_deploying_custom_framework.jpg",
    "alt_text": "laptop deploying to Heroku",
    "top_post": true,
    "nav_title": "Deply to Heroku",
    "meta_description": "Deploy to Heroku using the Python framework Django.
      It's easy to deploy to a site like Heroku when you follow
      the standard procedure. What happens when you're using a custom framework?",
    "category": 2
  }
},
{
  "model": "home.blog",
  "pk": 2,
  "fields": {
    "title": "Showing the elapsed time in Python",
    "url": "python-elapsed-time",
    "description": "Years, months, weeks, days, hours, and minutes. This shows the difference between now and a date in the past.",
    "content": "
         <figure>
           <pre>
           <code class='language-python line-numbers' contenteditable spellcheck='false' >from datetime import datetime, timedelta\nfrom dateutil import parser\n

def past_time(old_date):\n
   &nbsp;# Convert from a string into a datetime field\n
   &nbsp;old_date = parser.parse(old_date)\n\n
   &nbsp;# Find the difference in time between now and the old date\n
   &nbsp;date_difference = datetime.now() - old_date\n\n
   &nbsp;# Split the time difference into the different measurements\n
   &nbsp;years, months, weeks, days, hours, minutes = (\n
      &nbsp;&nbsp;&nbsp;date_difference.days // 365,\n
      &nbsp;&nbsp;&nbsp;date_difference.days // 30,\n
      &nbsp;&nbsp;&nbsp;date_difference.days // 7,\n
      &nbsp;&nbsp;&nbsp;date_difference.days,\n
      &nbsp;&nbsp;&nbsp;date_difference.seconds // 3600,\n
      &nbsp;&nbsp;&nbsp;date_difference.seconds // 60 % 60\n
    &nbsp;)\n\n
    &nbsp;# Determine most accurate time measurement depending on how long ago\n
   &nbsp;if years > 0:\n
       &nbsp;&nbsp;&nbsp;time_elapsed = years\n
       &nbsp;&nbsp;&nbsp;time_measure = 'year'\n
   &nbsp;elif months > 0:\n
      &nbsp;&nbsp;&nbsp;time_elapsed = months\n
      &nbsp;&nbsp;&nbsp;time_measure = 'month'\n
   &nbsp;elif weeks > 0:\n
       &nbsp;&nbsp;&nbsp;time_elapsed = weeks\n
       &nbsp;&nbsp;&nbsp;time_measure = 'week'\n
   &nbsp;elif days > 0:\n
       &nbsp;&nbsp;&nbsp;time_elapsed = days\n
       &nbsp;&nbsp;&nbsp;time_measure = 'day'\n
   &nbsp;elif hours > 0:\n
       &nbsp;&nbsp;&nbsp;time_elapsed = hours\n
       &nbsp;&nbsp;&nbsp;time_measure = 'hour'\n
   &nbsp;elif minutes > 0:\n
       &nbsp;&nbsp;&nbsp;time_elapsed = minutes\n
       &nbsp;&nbsp;&nbsp;time_measure = 'minute'\n
   &nbsp;else:\n
       &nbsp;&nbsp;&nbsp;time_elapsed = ''\n
       &nbsp;&nbsp;&nbsp;time_measure = 'A few seconds'\n\n
   &nbsp;# Determine if time_measure needs to be pluralized\n
   &nbsp;if time_elapsed != '' and time_elapsed > 1:\n
       &nbsp;&nbsp;time_measure += 's'\n\n
   &nbsp;return '{} {} ago'.format(time_elapsed, time_measure)\n\n
# Main program to run the function\n
old_date = '2018-03-23T21:44:23.404'\n
past_time(old_date) # Output: '2 weeks ago'\n
</code>
           </pre>
         </figure>
         ",
    "last_modified_date": "2018-04-7T20:43:23.404",
    "create_date": "2018-04-7T20:43:23.404",
    "filename": "time_elapsed_python.jpg",
    "alt_text": "watch showing elapsed time",
    "top_post": true,
    "nav_title": "Python Elapsed Time",
    "meta_description": "Years, months, weeks, days, hours, and minutes.
      This shows the difference between now and a date in the past in Python.",
    "category": 1
  }
},
{
  "model": "home.blog",
  "pk": 3,
  "fields": {
    "title": "5 Tips for Planning Projects ",
    "url": "5-tips-for-planning-projects",
    "description": "Don't learn the hard way. Plan now to save time later.",
    "content": "
         <p>
           Sadly, I'm sharing this information after learning the hard way.
           But the good news is that I did learn my lesson! Taking the time
           to fully plan a project will save time and produce a better product
           then brute-forcing your way through that project.
         </p>
         <h2>My Story</h2>
         <p>
           I currently study Information Systems at BYU. As part of the program, groups
           take on a final project at the end of each semester called the Integrated
           Exercise. Classes are cancelled for the week, and students apply recently
           learned management and programming skills.
         </p>
         <p>
           How does planning fit into this? Well, the first time my group participated
           we had a very weak outline of what our project was. It took us quite some time
           to finish our tasks. Without focus, team members were spinning
           their wheels not knowing how to contribute.
         </p>
         <p>
           The next time around, we had acquired some project management skills that changed
           the game completely. With direction and understanding, we finished early, created
           a better solution, and had fun during all of it. The following points are some useful ideas
           you can implement to be succesful in planning your own projects.
         </p>
         <p>
           <b class='note'>Important Note: </b> I am not responsible for the following ideas in the slightest.
           They originate from my professor Ernie and the organization of BYU.
        </p>
        <h2>Project Objective Statement</h2>
        <p>
          This is an overall summary of the project in under 30 words. Creating this statement
          fulfills two things:
          <ol>
            <li>1. Helps formulate in the mind exactly what you're trying to accomplish.</li>
            <li>2. Helps your team be on the same page of the overall objective of the project.
            You may think you see eye-to-eye with a co-worker until you put it on paper. </li>
          </ol>
        </p>
        <p>Here's an example project objective statement.</p>
        <p><i>'Create a self-hosted website to hand off and present to the Family
          Oriented Music Organization on April 13, 2018 for the contracted price.' </i></p>
          <h2>Identify Major Components</h2>
          <p>
            Once you know the overall objective, you can break it down into major components.
            Many times this may be the deliverables for your project. For example, this last
            project broke down into four items: the website app, a client report, an internal
            company report, and a presentation slide deck.
          </p>
          <h2>Break Components Down Into Tasks</h2>
          <p>
              Once major components are selected, it's time to brainstorm. Think of
              every possible task that needs to be accomplished within each of the
              components. Make sure every possible task is thought of and written
              down (sticky notes are a great help here). Don't worry about ordering
              tasks quite yet, just get them out of your brain and out on paper. I
              recommend creating a formal
              <a href='http://www.workbreakdownstructure.com' target='_blank'>Work
              Breakdown Structure</a> of the tasks.
          </p>
          <h2>Sequencing Tasks</h2>
          <p>
            <i>Now</i> you can order tasks. Sequence the tasks, identifying the preceding
            and following tasks for each one.
          </p>
          <h2>Assign Task Owners</h2>
          <p>
            A task owner isn't necessarily the doer of the task. They are the ones that
            are in charge of ensuring the task is carried out, whether they do it themselves
            or not. Make sure the task owner knows they're in charge of the task.
          </p>
          <h2>And You're Off!</h2>
          <p>
            These simple ideas will get you far. Even in small projects following
            these steps will save you hassle in the long run.
          </p>
          <h2>Follow Up Questions?</h2>
          <p>
            Implementing these ideas will you get you far, but this is no comphrensive
            guide to say the least. Feel free to reach out to me on
              <a href='https://twitter.com/patrik_drean' target='_blank'>
                Twitter
              </a> for follow up questions.
          </p>
          <p>
            Good luck planning!
          </p>
         ",
    "last_modified_date": "2018-04-13T23:43:23.404", #6:06pm 4-13
    "create_date": "2018-04-13T23:43:23.404",
    "filename": "planning_dependency_diagram.jpg",
    "alt_text": "planning diagram of a software project",
    "top_post": false,
    "nav_title": "Planning Software Projects",
    "meta_description": "Plan your software projects now to save time later. Don't
      learn the hard way.",
    "category": 3
  }
},
{
  "model": "home.blog",
  "pk": 4,
  "fields": {
    "title": "How to Make a Five-Star Review with JavaScript",
    "url": "five-star-review-javascript",
    "description": "A much prettier way to get a rating from a user using JavaScript.",
    "content": "
         <h2>Quick Start</h2>
         <p>Check out this
           <a href='https://codepen.io/pdrean4/pen/KRprzN' target='_blank'>
             CodePen
           </a>
           to see the five star review in action. The comments there may be all you need.</p>

         <h2>HTML</h2>
         <figure>
          <pre>
          <code class='language-html line-numbers' contenteditable spellcheck='false'>
          <xmp><!-- Import svg library from FontAwesome  -->\n
          <script defer src='https://use.fontawesome.com/releases/v5.0.7/js/all.js'></script>\n\n
          <div class='row' id='star_div'></xmp>\n
                   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<xmp><div class='star_wrap 1'><i class='far fa-star fa-2x stars'></i></div></xmp>\n
                   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<xmp><div class='star_wrap 2'><i class='far fa-star fa-2x stars'></i></div></xmp>\n
                   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<xmp><div class='star_wrap 3'><i class='far fa-star fa-2x stars'></i></div></xmp>\n
                   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<xmp><div class='star_wrap 4'><i class='far fa-star fa-2x stars'></i></div></xmp>\n
                   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<xmp><div class='star_wrap 5'><i class='far fa-star fa-2x stars'></i></div>\n
          </div>\n

  <input id='id_rating' type='hidden'/>
    </xmp>

          </code>
          </pre>
          </figure>

          <p>Be sure to import
            <a href='https://fontawesome.com/how-to-use/svg-with-js' target='_blank'>
              FontAwesome</a>.
            This allows us to use the star svg icon.
          </p>
          <p>
            The class 'star_wrap' is used for when the mouse hovers over that area.
          </p>
          <p>
            The number class (e.g., '1', '2') is used so the JavaScript
            knows which star to stop on depending on the star the user hovers over/clicks.
          </p>
          <p>
            The hidden field's value will change depending on the star selected. The
              <a href='https://codepen.io/pdrean4/pen/KRprzN' target='_blank'>
                CodePen
              </a> demonstrates that.
            </thead>
          </p>

        <h2>CSS</h2>

          <figure>
           <pre>
           <code class='language-css line-numbers' contenteditable spellcheck='false' >
            #star_div {\n
               &nbsp;&nbsp;&nbsp;margin: 0 auto;\n
               &nbsp;&nbsp;&nbsp;width: 300px;\n
            }\n
            .star_wrap {\n
               &nbsp;&nbsp;&nbsp;padding: 0 10px;\n
               &nbsp;&nbsp;&nbsp;float: left;\n
            }\n
            svg {\n
               &nbsp;&nbsp;&nbsp;background-color: inherit;\n
               &nbsp;&nbsp;&nbsp;color: #FDE338; // The star color can be changed here\n
            }


           </code>
           </pre>
           </figure>

         <h2 class='small_margin'>JavaScript</h2>

           <figure>
           <pre>
           <code class='language-javascript line-numbers' contenteditable spellcheck='false' >
             // Grab the star wraps and put into a list\n
             var stars_wrap = $('.star_wrap');\n
\n
             // Highlight the color when hovered\n
             stars_wrap.hover(\n
               &nbsp;&nbsp;&nbsp;function() {\n
\n
                 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Grab the number class in the star wrap the user is on (e.g., '1', '5')\n
                 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var starNumber = ($(this).attr('class').split(/\\s+/))[1];\n
\n
                 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Add color when mouse enters. See below for function.\n
                 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hoverStars(starNumber)\n
               &nbsp;&nbsp;&nbsp;}, function() {\n
\n
                 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Take away color when mouse leaves. See below for function.\n
                 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unHoverStars();\n
               &nbsp;&nbsp;&nbsp;}\n
             );\n
\n
             // Fill the color when clicked\n
             stars_wrap.click(\n
              &nbsp;&nbsp;&nbsp;function() {\n
\n
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Grab the number class in the star wrap the user is on (e.g., '1', '5')\n
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var starNumber = ($(this).attr('class').split(/\\s+/))[1];\n
\n
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Keep color added when user clicks. Changes the value of the input \n
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// with the id of 'rating'. See below for function.\n
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clickStars(starNumber);\n
\n
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Takes away events so that user can't hover stars anymore\n
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stars_wrap.off('mouseenter mouseleave');\n
             &nbsp;&nbsp;&nbsp;});\n
\n
             // The color fill for the svg tags \n
\n
             var colorFilled = 'M259.3 17.8L194 150.2 47.9 171.5c-26.2 3.8-36.7 36.1-17.7
              54.6l105.7 103-25 145.5c-4.5 26.3 23.2 46 46.4 33.7L288 439.6l130.7 68.7c23.2
              12.2 50.9-7.4 46.4-33.7l-25-145.5 105.7-103c19-18.5 8.5-50.8-17.7-54.6L382 150.2
              316.7 17.8c-11.7-23.6-45.6-23.9-57.4 0z'
\n
             var colorOutlined = 'M528.1 171.5L382 150.2 316.7 17.8c-11.7-23.6-45.6-23.9-57.4
             0L194 150.2 47.9 171.5c-26.2 3.8-36.7 36.1-17.7 54.6l105.7 103-25 145.5c-4.5 26.3
             23.2 46 46.4 33.7L288 439.6l130.7 68.7c23.2 12.2 50.9-7.4 46.4-33.7l-25-145.5
             105.7-103c19-18.5 8.5-50.8-17.7-54.6zM388.6 312.3l23.7 138.4L288 385.4l-124.3
             65.3 23.7-138.4-100.6-98 139-20.2 62.2-126 62.2 126 139 20.2-100.6 98z'
\n
             // Functions to hover, unhover, and click\n
\n
             function hoverStars(starNumber) {\n
\n
               &nbsp;&nbsp;&nbsp;// Grab each star and put into list\n
               &nbsp;&nbsp;&nbsp;var stars = $('path')\n
               &nbsp;&nbsp;&nbsp;stars.each(function( index, element ) {\n
\n
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Change the 'd' attribute to fill the color\n
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stars_wrap = $(this).parent().parent()\n
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$( element ).attr('d', colorFilled);\n
\n
                 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Break the loop once on the hovered star\n
                 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( stars_wrap.hasClass(starNumber)) {\n
                   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;\n
                 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n
               &nbsp;&nbsp;&nbsp;});\n
             }\n
\n
             function unHoverStars() {\n
\n
               &nbsp;&nbsp;&nbsp;// Grab each star and put into list\n
               &nbsp;&nbsp;&nbsp;var stars = $('path')\n
\n
               &nbsp;&nbsp;&nbsp;// Change the 'd' attribute to be outlined again\n
               &nbsp;&nbsp;&nbsp;stars.attr('d', colorOutlined);\n
             }\n
\n
             function clickStars(starNumber) {\n
\n
               &nbsp;&nbsp;&nbsp;// Grab each star and put into list\n
               &nbsp;&nbsp;&nbsp;var stars = $('path')\n
               &nbsp;&nbsp;&nbsp;var booleanStar = true\n
\n
                &nbsp;&nbsp;&nbsp;// Go through each star to give its color until it hits the indicated star\n
                &nbsp;&nbsp;&nbsp;stars.each(function( index, element ) {\n
\n
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (booleanStar)\n
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$( element ).attr('d', colorFilled);\n
\n
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stars_wrap = $(this).parent().parent();\n
\n
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Determine if this is the star the user is clicking. Change input field\n
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( stars_wrap.hasClass(starNumber))\n
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n
                       &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rating = $('#rating')\n
                       &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rating.val(starNumber);\n
\n
                       &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;booleanStar = false;\n
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n
\n
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Fill in the rest of the stars with outlines once the class was found\n
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else\n
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$( element ).attr('d', colorOutlined);\n
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n
             &nbsp;&nbsp;&nbsp;});\n
             }
           </code>
           </pre>
           </figure>
           <p>
             Make sure you have linked
             <a href='https://www.w3schools.com/jquery/jquery_get_started.asp' target='_blank'>
               jQuery
             </a>
             in your project.
           </p>
           <p>
             <a href='https://twitter.com/patrik_drean' target='_blank'>
               Reach out
             </a>
             if you have questions.
           </p>
    ",
    "create_date": "2018-04-20T21:40:23.404", #4:24pm 4-20
    "last_modified_date": "2018-04-20T21:43:23.404",
    "filename": "star_review.jpg",
    "alt_text": "five star review in java script",
    "top_post": true,
    "nav_title": "5-Star Review JavaScript",
    "meta_description": "A much prettier way to get a rating from a user using JavaScript.
    This post shows you how to create a five star review using JavaScript, HTML, and CSS.",
    "category": 4
  }
},
{
  "model": "home.blog",
  "pk": 5,
  "fields": {
    "title": "Test Driven Development - Fundamentals",
    "url": "test-driven-development-fundamentals",
    "description": "To test first or not to test first, that is the question.",
    "content": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Sed arcu non odio euismod lacinia at. Ipsum nunc aliquet bibendum enim facilisis gravida neque convallis. Tellus mauris a diam maecenas sed enim. Velit sed ullamcorper morbi tincidunt. Suspendisse potenti nullam ac tortor vitae. Velit sed ullamcorper morbi tincidunt ornare. Egestas erat imperdiet sed euismod nisi porta lorem mollis. Sit amet commodo nulla facilisi. Ac auctor augue mauris augue neque gravida. Diam quam nulla porttitor massa id. Massa vitae tortor condimentum lacinia quis. Ipsum a arcu cursus vitae congue. Enim nulla aliquet porttitor lacus luctus accumsan tortor posuere. Justo donec enim diam vulputate ut pharetra sit.",
    "create_date": "2018-04-28T2:40:23.404", #8:24am 4-28
    "last_modified_date": "2018-04-28T2:40:23.404",
    "filename": "test_chalkbaord.jpg",
    "alt_text": "the word test on a chalkboard",
    "top_post": false,
    "nav_title": "Test Driven Development",
    "meta_description": "Test Driven Development, or TDD, is a methdology used by
    programmers to create higher quality code. ",
    "category": 5
  }
}

]
# {
#   "model": "home.blog",
#   "pk": 5,
#   "fields": {
#     "title": "Test Driven Development - Fundamentals",
#     "url": "test-driven-development-fundamentals",
#     "description": "This is something basic we all learn at fast, but is it really that easy?",
#     "content": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Sed arcu non odio euismod lacinia at. Ipsum nunc aliquet bibendum enim facilisis gravida neque convallis. Tellus mauris a diam maecenas sed enim. Velit sed ullamcorper morbi tincidunt. Suspendisse potenti nullam ac tortor vitae. Velit sed ullamcorper morbi tincidunt ornare. Egestas erat imperdiet sed euismod nisi porta lorem mollis. Sit amet commodo nulla facilisi. Ac auctor augue mauris augue neque gravida. Diam quam nulla porttitor massa id. Massa vitae tortor condimentum lacinia quis. Ipsum a arcu cursus vitae congue. Enim nulla aliquet porttitor lacus luctus accumsan tortor posuere. Justo donec enim diam vulputate ut pharetra sit.",
#     "create_date": "2018-04-20T21:40:23.404", #4:24pm 4-20
#     "last_modified_date": "2018-04-20T21:43:23.404",
#     "filename": "star_review.jpg",
#     "alt_text": "five star review in java script",
#     "top_post": true,
#     "nav_title": "5-Star Review JavaScript",
#     "meta_description": "A much prettier way to get a rating from a user using JavaScript.
#     This post shows you how to create a five star review using JavaScript, HTML, and CSS.",
#     "category": 4
#   }
# }
