[
{
  "model": "home.category",
  "pk": 1,
  "fields": {
    "name": "Python",
    "url": "python",
    "filename": null,
    "create_date": "2018-03-23T20:32:32.404",
    "last_modified_date": "2018-03-23T20:32:56.366"
  }
},
{
  "model": "home.category",
  "pk": 2,
  "fields": {
    "name": "Deployment",
    "url": "deployment",
    "filename": null,
    "create_date": "2018-03-23T20:32:32.404",
    "last_modified_date": "2018-03-23T20:32:56.366"
  }
},
{
  "model": "home.category",
  "pk": 3,
  "fields": {
    "name": "Soft Skills",
    "url": "soft_skils",
    "filename": null,
    "create_date": "2018-03-23T20:32:32.404",
    "last_modified_date": "2018-03-23T20:32:56.366"
  }
},
{
  "model": "home.category",
  "pk": 4,
  "fields": {
    "name": "JavaScript",
    "url": "javascript",
    "filename": null,
    "create_date": "2018-04-20T20:32:32.404",
    "last_modified_date": "2018-04-20T20:32:56.366"
  }
},
{
  "model": "home.category",
  "pk": 5,
  "fields": {
    "name": "Testing",
    "url": "testing",
    "filename": null,
    "create_date": "2018-04-28T20:32:32.404",
    "last_modified_date": "2018-04-28T20:32:56.366"
  }
},
{
  "model": "home.category",
  "pk": 6,
  "fields": {
    "name": "C++",
    "url": "C-plus-plus",
    "filename": null,
    "create_date": "2018-07-25T20:32:32.404",
    "last_modified_date": "2018-07-25T20:32:56.366"
  }
},
# {
#   "model": "home.blog",
#   "pk": 1,
#   "fields": {
#     "title": "AWS: Somewhere in the Cloud",
#     "url": "aws_somewhere_in_the_cloud",
#     "description": "So it turns out that the cloud is somewhere on the ground. Who would've thought of that?",
#     "content": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Sed arcu non odio euismod lacinia at. Ipsum nunc aliquet bibendum enim facilisis gravida neque convallis. Tellus mauris a diam maecenas sed enim. Velit sed ullamcorper morbi tincidunt. Suspendisse potenti nullam ac tortor vitae. Velit sed ullamcorper morbi tincidunt ornare. Egestas erat imperdiet sed euismod nisi porta lorem mollis. Sit amet commodo nulla facilisi. Ac auctor augue mauris augue neque gravida. Diam quam nulla porttitor massa id. Massa vitae tortor condimentum lacinia quis. Ipsum a arcu cursus vitae congue. Enim nulla aliquet porttitor lacus luctus accumsan tortor posuere. Justo donec enim diam vulputate ut pharetra sit.",
#     "create_date": "2018-03-22T17:31:29.037",
#     "last_modified_date": "2018-03-22T17:31:29.037",
#     "filename": "server.jpg",
#     "alt_text": "deploying to a server",
#     "top_post": true,
#     "category": 2
#   }
# },
# {
#   "model": "home.blog",
#   "pk": 2,
#   "fields": {
#     "title": "Reaching Your Way to the Top",
#     "url": "reaching_your_way_to_the_top",
#     "description": "Sometimes after climbing the stairs for so long, you forget where you're heading",
#     "content": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Sed arcu non odio euismod lacinia at. Ipsum nunc aliquet bibendum enim facilisis gravida neque convallis. Tellus mauris a diam maecenas sed enim. Velit sed ullamcorper morbi tincidunt. Suspendisse potenti nullam ac tortor vitae. Velit sed ullamcorper morbi tincidunt ornare. Egestas erat imperdiet sed euismod nisi porta lorem mollis. Sit amet commodo nulla facilisi. Ac auctor augue mauris augue neque gravida. Diam quam nulla porttitor massa id. Massa vitae tortor condimentum lacinia quis. Ipsum a arcu cursus vitae congue. Enim nulla aliquet porttitor lacus luctus accumsan tortor posuere. Justo donec enim diam vulputate ut pharetra sit.",
#     "create_date": "2018-03-23T05:32:55.758",
#     "last_modified_date": "2018-03-23T05:32:55.758",
#     "filename": "skyscraper.jpg",
#     "alt_text": "high skyscraper",
#     "top_post": true,
#     "category": 6
#   }
# },
# {
#   "model": "home.blog",
#   "pk": 3,
#   "fields": {
#     "title": "How to Con + cat + enate",
#     "url": "how_to_concatenate",
#     "description": "This is something basic we all learn at fast, but is it really that easy?",
#     "content": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Sed arcu non odio euismod lacinia at. Ipsum nunc aliquet bibendum enim facilisis gravida neque convallis. Tellus mauris a diam maecenas sed enim. Velit sed ullamcorper morbi tincidunt. Suspendisse potenti nullam ac tortor vitae. Velit sed ullamcorper morbi tincidunt ornare. Egestas erat imperdiet sed euismod nisi porta lorem mollis. Sit amet commodo nulla facilisi. Ac auctor augue mauris augue neque gravida. Diam quam nulla porttitor massa id. Massa vitae tortor condimentum lacinia quis. Ipsum a arcu cursus vitae congue. Enim nulla aliquet porttitor lacus luctus accumsan tortor posuere. Justo donec enim diam vulputate ut pharetra sit.",
#     "create_date": "2018-03-23T06:32:55.758",
#     "last_modified_date": "2018-03-23T06:32:55.758",
#     "filename": "tiger_how_to_concatenate.jpg",
#     "alt_text": "Tiger - how to concatenate",
#     "top_post": true,
#     "category": 1
#   }
# },
{
  "model": "home.blog",
  "pk": 1,
  "fields": {
    "title": "Deploy to Heroku with Dependencies in Django",
    "url": "how-to-deploy-to-heroku",
    "description": "It's easy to deploy to a site like Heroku when you follow the standard procedure. What happens when you're using a custom framework?",
    "content": "
                    <p>Programming already has its fair share of bugs and headaches. When it comes to
                  deploying a project this pain only multiplies. This is a walkthrough on how to deploy
                  to Heroku when dependencies(e.g., custom frameworks, libraries, etc.) are required for your
                  project. Using <a href='http://django-mako-plus.readthedocs.io/about.html' target='_blank'>
                  Django-Mako-Plus</a>, a custom python framework, we will show how you can deploy your
                  project with a framework that isn't officially supported by Heroku.
                </p>
                <h2>Initial Setup</h2>

                  <p>
                  <ul>
                    <li>
                      Sign up for a
                      <a href='https://signup.heroku.com/dc' target='_blank'>Heroku</a> account
                    </li>
                    <li>
                      Setup up
                      <a href='https://help.github.com/articles/set-up-git/' target='_blank'>git</a>
                      in your project
                    </li>
                    <li>
                      Install
                      <a href='http://www.postgresqltutorial.com/install-postgresql/' target='_blank'>
                              postgresql
                          </a>
                    </li>
                    <li>
                      Run the following in terminal (Learn about pip
                      <a href='http://www.pythonforbeginners.com/pip/' target='_blank'>here</a>):
                    </li>
                  </ul>
                  <figure>
                    <pre>
                         <code class='language-python' contenteditable spellcheck='false' >pip install pipenv</code>
                         </pre>
                  </figure>
                </p>

                <h2 class='small_margin'>Download Heroku tools</h2>
                <p> The tools can be found
                  <a href='https://devcenter.heroku.com/articles/getting-started-with-python#set-up'
                    target='_blank'> here</a>.
                    Download the appropriate package for your machine (i.e., Windows, Mac, etc.)
                </p>
                <p>Once downloaded, login to your heroku account in terminal. </p>

                <figure>
                 <pre>
                 <code class='language-python' contenteditable spellcheck='false' >heroku login</code>
                 </pre>
                 </figure>

                 <p>The following prompt should appear.</p>

                 <figure>
                  <pre>
                  <code class='language-python line-numbers' contenteditable spellcheck='false' >
              Enter your Heroku credentials:\n
               Email: myemail@domain.com\n
               Password: ********** </code>
                  </pre>
                  </figure>

                  <h2 class='small_margin'>Install Heroku to the Project</h2>
                  <p>Once you have git installed in your project, you can create a Heroku app.</p>
                  <figure>
                 <pre>
                 <code class='language-python' contenteditable spellcheck='false' >heroku create myNewApp</code>
                 </pre>
                 </figure>
                 <p>In this case I named my app 'myNewApp'. If no name is indicated, Heroku
                 automatically assigns a random name.</p>

                 <h2>Define a Procfile</h2>
                 <p>The
                   <a href='https://devcenter.heroku.com/articles/getting-started-with-python#define-a-procfile'
                   target='_blank'>Procfile</a>
                    declares what command should be run to start your app. It's an empty text file
                    we create (with no extention) in the root of our project. It has one line of code.
                  </p>
                  <figure>
                      <pre>
                      <code class='language-python' contenteditable spellcheck='false' >web: gunicorn myProjectName.wsgi --log-file -</code>
                      </pre>
                      </figure>
                  <p>
                    Be sure to update it to your project name. In this case, my Django project
                    is called 'myProjectName'.
                  </p>


                  <h2>Define a Pipfile</h2>
                  <p>
                    This step is crucial. A Pipfile is used by Heroku to pip install all the
                    necessary packages onto the Heroku server so that your app can run online
                    as well as it does locally. We create this file in the root of the project as
                    a text file (with no extension). Here is an example of what should be included
                    in the Pipfile.
                  </p>
                  <figure>
                      <pre>
                      <code class='language-python line-numbers' contenteditable spellcheck='false'>
                      [[source]]\n
                      url = \"https://pypi.python.org/simple\"\n
                      verify_ssl = true\n\n
                      [packages]\n
                      django = \"*\"\n
                      dj-database-url = \"*\" \n
                      psycopg2 = \"*\" \n
                      gunicorn = \"*\" \n
                      whitenoise = \"*\" \n
                      django-mako-plus = \"*\" \n\n
                      [requires] \n
                      python_version = \"3.6\"
               </code>
                      </pre>
                      </figure>
                      <p>An explanation of critical packages:</p>
                      <p class='p_indent'>django, dj-database-url, psycopg2 - these are standard packages in Django.</p>
                      <p class='p_indent'>
                        <a href='http://gunicorn.org' target='_blank'>gunicorn</a> -
                        This helps integrate Django projects into a web server.
                      </p>
                      <p class='p_indent'>
                        <a href='http://whitenoise.evans.io/en/stable/' target='_blank'>whitenoise</a> -
                        This helps translate static link work in the Heroku server folder.
                      </p>
                      <p class='p_indent'>
                        django-mako-plus - The custom framework package.
                      </p>
                      <p>
                        It's important to note that the \"*\" indicates the most current update of
                        that package. This can be hardcorded to a specific version (e.g., \"==3.2\").
                      </p>

                      <h2>How to View Your Current Packages in Your Project</h2>
                      <p>
                         This command in the termnial displays all the packages currently installed
                         in your environment.
                      </p>
                      <figure>
                          <pre>
                          <code class='language-python' contenteditable spellcheck='false' >pip freeze</code>
                          </pre>
                      </figure>
                      <p>
                        This outputs the packages into a text file.
                      </p>
                      <figure>
                          <pre>
                          <code class='language-python' contenteditable spellcheck='false' >pip freeze > myTextFile.txt</code>
                          </pre>
                      </figure>
                      <p>
                        You can then look through your installed packages and include any necessary ones in your Pipfile under the [packages] section.
                      </p>

                      <h2>Create Pipfile.lock</h2>
                      Once the Pipfile is created correctly, run the following in the terminal. This will lock in your packages so Heroku can install them when you deploy.
                      <figure>
                          <pre>
                          <code class='language-python' contenteditable spellcheck='false' >pipenv lock</code>
                          </pre>
                      </figure>
                      <p class='note'>NOTE: you may need deactivate your virtual environment first.</p>

                      <h2>Change settings.py</h2>
                      <p>Update allowed hosts to the following. In this case, my domain name is
                      myWebsiteDomain.com.</p>
                      <figure>
                          <pre>
                          <code class='language-python' contenteditable spellcheck='false' >ALLOWED_HOSTS = ['myWebsiteDomain.com']</code>
                          </pre>
                      </figure>
                      <p>This allows any web server to access your project.</p>
                     <figure>
                       <pre>
                       <code class='language-python' contenteditable spellcheck='false' >ALLOWED_HOSTS = ['*']</code>
                       </pre>
                     </figure>
                     <p>Include whitenoise in the middleware.</p>
                     <figure>
                       <pre>
                       <code class='language-python line-numbers' contenteditable spellcheck='false' >
                       MIDDLEWARE = [\n
                       . . .\n
                       'whitenoise.middleware.WhiteNoiseMiddleware',\n
                ]
                </code></pre>
                     </figure>

                     <h2>Ready to Deploy? Me too.</h2>
                     <figure>
                       <pre>
                       <code class='language-python' contenteditable spellcheck='false' >git push heroku master</code>
                       </pre>
                     </figure>
                     <p class='note'>
                       NOTE: Be sure you've committed all of your changes. Also be sure you're committing
                       on master.
                     </p>

                     <h2>Create a PostgreSQL Database</h2>
                     <p>
                       Create a free PostgreSQL database on Heroku's server.
                     </p>
                     <figure>
                         <pre>
                         <code class='language-python' contenteditable spellcheck='false' >heroku addons</code>
                         </pre>
                     </figure>
                     <p>
                       Check the status of your database.
                     </p>
                     <figure>
                         <pre>
                         <code class='language-python' contenteditable spellcheck='false' >heroku pg</code>
                         </pre>
                     </figure>

                     <h2 class='small_margin'>Update settings.py for the Database</h2>
                     <p>This should be included right after the database definition.
                       It's important to note that it's not necessary to remove your database
                       definition. Commit this and push it to the Heroku server.
                     </p>
                     <figure>
                         <pre>
                         <code class='language-python line-numbers' contenteditable spellcheck='false' >
                         import dj_database_url \n
                         db_from_env = dj_database_url.config() \n
                         DATABASES['default'].update(db_from_env)</code>
                         </pre>
                   </figure>

                   <h2 class='small_margin'>Run Database Migrations on Heroku</h2>
                   <figure>
                 <pre>
                 <code class='language-python line-numbers' contenteditable spellcheck='false' >
                 heroku run python manage.py makemigrations myAppName \n
                 heroku run python manage.py migrate </code>
                 </pre>
               </figure>
               </div>

               <h2 class='small_margin'>The Finish Line</h2>
               <figure>
                 <pre>
                 <code class='language-python' contenteditable spellcheck='false' >heroku open</code>
                 </pre>
               </figure>
                 <h2 id='reference_header' >References</h2>
                 <a class='align-center' href='https://devcenter.heroku.com/articles/getting-started-with-python#introduction'>
                   https://devcenter.heroku.com/articles/getting-started-with-python#introduction
                 </a>
    ",
    "create_date": "2018-03-23T17:31:29.037",
    "last_modified_date": "2018-03-23T17:31:29.037",
    "filename": "heroku_deploying_custom_framework.jpg",
    "alt_text": "laptop deploying to Heroku",
    "top_post": true,
    "nav_title": "Deply to Heroku",
    "meta_description": "Deploy to Heroku using the Python framework Django.
      It's easy to deploy to a site like Heroku when you follow
      the standard procedure. What happens when you're using a custom framework?",
    "category": 2
  }
},
{
  "model": "home.blog",
  "pk": 2,
  "fields": {
    "title": "Showing the elapsed time in Python",
    "url": "python-elapsed-time",
    "description": "Years, months, weeks, days, hours, and minutes. This shows the difference between now and a date in the past.",
    "content": "
         <figure>
           <pre>
           <code class='language-python line-numbers' contenteditable spellcheck='false' >from datetime import datetime, timedelta\nfrom dateutil import parser\n

def past_time(old_date):\n
   &nbsp;# Convert from a string into a datetime field\n
   &nbsp;old_date = parser.parse(old_date)\n\n
   &nbsp;# Find the difference in time between now and the old date\n
   &nbsp;date_difference = datetime.now() - old_date\n\n
   &nbsp;# Split the time difference into the different measurements\n
   &nbsp;years, months, weeks, days, hours, minutes = (\n
      &nbsp;&nbsp;&nbsp;date_difference.days // 365,\n
      &nbsp;&nbsp;&nbsp;date_difference.days // 30,\n
      &nbsp;&nbsp;&nbsp;date_difference.days // 7,\n
      &nbsp;&nbsp;&nbsp;date_difference.days,\n
      &nbsp;&nbsp;&nbsp;date_difference.seconds // 3600,\n
      &nbsp;&nbsp;&nbsp;date_difference.seconds // 60 % 60\n
    &nbsp;)\n\n
    &nbsp;# Determine most accurate time measurement depending on how long ago\n
   &nbsp;if years > 0:\n
       &nbsp;&nbsp;&nbsp;time_elapsed = years\n
       &nbsp;&nbsp;&nbsp;time_measure = 'year'\n
   &nbsp;elif months > 0:\n
      &nbsp;&nbsp;&nbsp;time_elapsed = months\n
      &nbsp;&nbsp;&nbsp;time_measure = 'month'\n
   &nbsp;elif weeks > 0:\n
       &nbsp;&nbsp;&nbsp;time_elapsed = weeks\n
       &nbsp;&nbsp;&nbsp;time_measure = 'week'\n
   &nbsp;elif days > 0:\n
       &nbsp;&nbsp;&nbsp;time_elapsed = days\n
       &nbsp;&nbsp;&nbsp;time_measure = 'day'\n
   &nbsp;elif hours > 0:\n
       &nbsp;&nbsp;&nbsp;time_elapsed = hours\n
       &nbsp;&nbsp;&nbsp;time_measure = 'hour'\n
   &nbsp;elif minutes > 0:\n
       &nbsp;&nbsp;&nbsp;time_elapsed = minutes\n
       &nbsp;&nbsp;&nbsp;time_measure = 'minute'\n
   &nbsp;else:\n
       &nbsp;&nbsp;&nbsp;time_elapsed = ''\n
       &nbsp;&nbsp;&nbsp;time_measure = 'A few seconds'\n\n
   &nbsp;# Determine if time_measure needs to be pluralized\n
   &nbsp;if time_elapsed != '' and time_elapsed > 1:\n
       &nbsp;&nbsp;time_measure += 's'\n\n
   &nbsp;return '{} {} ago'.format(time_elapsed, time_measure)\n\n
# Main program to run the function\n
old_date = '2018-03-23T21:44:23.404'\n
past_time(old_date) # Output: '2 weeks ago'\n
</code>
           </pre>
         </figure>
         ",
    "last_modified_date": "2018-04-7T20:43:23.404",
    "create_date": "2018-04-7T20:43:23.404",
    "filename": "time_elapsed_python.jpg",
    "alt_text": "watch showing elapsed time",
    "top_post": true,
    "nav_title": "Python Elapsed Time",
    "meta_description": "Years, months, weeks, days, hours, and minutes.
      This shows the difference between now and a date in the past in Python.",
    "category": 1
  }
},
{
  "model": "home.blog",
  "pk": 3,
  "fields": {
    "title": "5 Tips for Planning Projects ",
    "url": "5-tips-for-planning-projects",
    "description": "Don't learn the hard way. Plan now to save time later.",
    "content": "
         <p>
           Sadly, I'm sharing this information after learning the hard way.
           But the good news is that I did learn my lesson! Taking the time
           to fully plan a project will save time and produce a better product
           then brute-forcing your way through that project.
         </p>
         <h2>My Story</h2>
         <p>
           I currently study Information Systems at BYU. As part of the program, groups
           take on a final project at the end of each semester called the Integrated
           Exercise. Classes are cancelled for the week, and students apply recently
           learned management and programming skills.
         </p>
         <p>
           How does planning fit into this? Well, the first time my group participated
           we had a very weak outline of what our project was. It took us quite some time
           to finish our tasks. Without focus, team members were spinning
           their wheels not knowing how to contribute.
         </p>
         <p>
           The next time around, we had acquired some project management skills that changed
           the game completely. With direction and understanding, we finished early, created
           a better solution, and had fun during all of it. The following points are some useful ideas
           you can implement to be succesful in planning your own projects.
         </p>
         <p>
           <b class='note'>Important Note: </b> I am not responsible for the following ideas in the slightest.
           They originate from my professor Ernie and the organization of BYU.
        </p>
        <h2>Project Objective Statement</h2>
        <p>
          This is an overall summary of the project in under 30 words. Creating this statement
          fulfills two things:
          <ol>
            <li>1. Helps formulate in the mind exactly what you're trying to accomplish.</li>
            <li>2. Helps your team be on the same page of the overall objective of the project.
            You may think you see eye-to-eye with a co-worker until you put it on paper. </li>
          </ol>
        </p>
        <p>Here's an example project objective statement.</p>
        <p><i>'Create a self-hosted website to hand off and present to the Family
          Oriented Music Organization on April 13, 2018 for the contracted price.' </i></p>
          <h2>Identify Major Components</h2>
          <p>
            Once you know the overall objective, you can break it down into major components.
            Many times this may be the deliverables for your project. For example, this last
            project broke down into four items: the website app, a client report, an internal
            company report, and a presentation slide deck.
          </p>
          <h2>Break Components Down Into Tasks</h2>
          <p>
              Once major components are selected, it's time to brainstorm. Think of
              every possible task that needs to be accomplished within each of the
              components. Make sure every possible task is thought of and written
              down (sticky notes are a great help here). Don't worry about ordering
              tasks quite yet, just get them out of your brain and out on paper. I
              recommend creating a formal
              <a href='http://www.workbreakdownstructure.com' target='_blank'>Work
              Breakdown Structure</a> of the tasks.
          </p>
          <h2>Sequencing Tasks</h2>
          <p>
            <i>Now</i> you can order tasks. Sequence the tasks, identifying the preceding
            and following tasks for each one.
          </p>
          <h2>Assign Task Owners</h2>
          <p>
            A task owner isn't necessarily the doer of the task. They are the ones that
            are in charge of ensuring the task is carried out, whether they do it themselves
            or not. Make sure the task owner knows they're in charge of the task.
          </p>
          <h2>And You're Off!</h2>
          <p>
            These simple ideas will get you far. Even in small projects following
            these steps will save you hassle in the long run.
          </p>
          <h2>Follow Up Questions?</h2>
          <p>
            Implementing these ideas will you get you far, but this is no comphrensive
            guide to say the least. Feel free to reach out to me on
              <a href='https://twitter.com/patrik_drean' target='_blank'>
                Twitter
              </a> for follow up questions.
          </p>
          <p>
            Good luck planning!
          </p>
         ",
    "last_modified_date": "2018-04-13T23:43:23.404", #6:06pm 4-13
    "create_date": "2018-04-13T23:43:23.404",
    "filename": "planning_dependency_diagram.jpg",
    "alt_text": "planning diagram of a software project",
    "top_post": false,
    "nav_title": "Planning Software Projects",
    "meta_description": "Plan your software projects now to save time later. Don't
      learn the hard way.",
    "category": 3
  }
},
{
  "model": "home.blog",
  "pk": 4,
  "fields": {
    "title": "How to Make a Five-Star Review with JavaScript",
    "url": "five-star-review-javascript",
    "description": "A much prettier way to get a rating from a user using JavaScript.",
    "content": "
         <h2>Quick Start</h2>
         <p>Check out this
           <a href='https://codepen.io/pdrean4/pen/KRprzN' target='_blank'>
             CodePen
           </a>
           to see the five star review in action. The comments there may be all you need.</p>

         <h2>HTML</h2>
         <figure>
          <pre>
          <code class='language-html line-numbers' contenteditable spellcheck='false'>
          <xmp><!-- Import svg library from FontAwesome  -->\n
          <script defer src='https://use.fontawesome.com/releases/v5.0.7/js/all.js'></script>\n\n
          <div class='row' id='star_div'></xmp>\n
                   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<xmp><div class='star_wrap 1'><i class='far fa-star fa-2x stars'></i></div></xmp>\n
                   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<xmp><div class='star_wrap 2'><i class='far fa-star fa-2x stars'></i></div></xmp>\n
                   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<xmp><div class='star_wrap 3'><i class='far fa-star fa-2x stars'></i></div></xmp>\n
                   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<xmp><div class='star_wrap 4'><i class='far fa-star fa-2x stars'></i></div></xmp>\n
                   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<xmp><div class='star_wrap 5'><i class='far fa-star fa-2x stars'></i></div>\n
          </div>\n

  <input id='id_rating' type='hidden'/>
    </xmp>

          </code>
          </pre>
          </figure>

          <p>Be sure to import
            <a href='https://fontawesome.com/how-to-use/svg-with-js' target='_blank'>
              FontAwesome</a>.
            This allows us to use the star svg icon.
          </p>
          <p>
            The class 'star_wrap' is used for when the mouse hovers over that area.
          </p>
          <p>
            The number class (e.g., '1', '2') is used so the JavaScript
            knows which star to stop on depending on the star the user hovers over/clicks.
          </p>
          <p>
            The hidden field's value will change depending on the star selected. The
              <a href='https://codepen.io/pdrean4/pen/KRprzN' target='_blank'>
                CodePen
              </a> demonstrates that.
            </thead>
          </p>

        <h2>CSS</h2>

          <figure>
           <pre>
           <code class='language-css line-numbers' contenteditable spellcheck='false' >
            #star_div {\n
               &nbsp;&nbsp;&nbsp;margin: 0 auto;\n
               &nbsp;&nbsp;&nbsp;width: 300px;\n
            }\n
            .star_wrap {\n
               &nbsp;&nbsp;&nbsp;padding: 0 10px;\n
               &nbsp;&nbsp;&nbsp;float: left;\n
            }\n
            svg {\n
               &nbsp;&nbsp;&nbsp;background-color: inherit;\n
               &nbsp;&nbsp;&nbsp;color: #FDE338; // The star color can be changed here\n
            }


           </code>
           </pre>
           </figure>

         <h2 class='small_margin'>JavaScript</h2>

           <figure>
           <pre>
           <code class='language-javascript line-numbers' contenteditable spellcheck='false' >
             // Grab the star wraps and put into a list\n
             var stars_wrap = $('.star_wrap');\n
\n
             // Highlight the color when hovered\n
             stars_wrap.hover(\n
               &nbsp;&nbsp;&nbsp;function() {\n
\n
                 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Grab the number class in the star wrap the user is on (e.g., '1', '5')\n
                 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var starNumber = ($(this).attr('class').split(/\\s+/))[1];\n
\n
                 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Add color when mouse enters. See below for function.\n
                 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hoverStars(starNumber)\n
               &nbsp;&nbsp;&nbsp;}, function() {\n
\n
                 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Take away color when mouse leaves. See below for function.\n
                 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unHoverStars();\n
               &nbsp;&nbsp;&nbsp;}\n
             );\n
\n
             // Fill the color when clicked\n
             stars_wrap.click(\n
              &nbsp;&nbsp;&nbsp;function() {\n
\n
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Grab the number class in the star wrap the user is on (e.g., '1', '5')\n
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var starNumber = ($(this).attr('class').split(/\\s+/))[1];\n
\n
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Keep color added when user clicks. Changes the value of the input \n
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// with the id of 'rating'. See below for function.\n
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clickStars(starNumber);\n
\n
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Takes away events so that user can't hover stars anymore\n
               &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stars_wrap.off('mouseenter mouseleave');\n
             &nbsp;&nbsp;&nbsp;});\n
\n
             // The color fill for the svg tags \n
\n
             var colorFilled = 'M259.3 17.8L194 150.2 47.9 171.5c-26.2 3.8-36.7 36.1-17.7
              54.6l105.7 103-25 145.5c-4.5 26.3 23.2 46 46.4 33.7L288 439.6l130.7 68.7c23.2
              12.2 50.9-7.4 46.4-33.7l-25-145.5 105.7-103c19-18.5 8.5-50.8-17.7-54.6L382 150.2
              316.7 17.8c-11.7-23.6-45.6-23.9-57.4 0z'
\n
             var colorOutlined = 'M528.1 171.5L382 150.2 316.7 17.8c-11.7-23.6-45.6-23.9-57.4
             0L194 150.2 47.9 171.5c-26.2 3.8-36.7 36.1-17.7 54.6l105.7 103-25 145.5c-4.5 26.3
             23.2 46 46.4 33.7L288 439.6l130.7 68.7c23.2 12.2 50.9-7.4 46.4-33.7l-25-145.5
             105.7-103c19-18.5 8.5-50.8-17.7-54.6zM388.6 312.3l23.7 138.4L288 385.4l-124.3
             65.3 23.7-138.4-100.6-98 139-20.2 62.2-126 62.2 126 139 20.2-100.6 98z'
\n
             // Functions to hover, unhover, and click\n
\n
             function hoverStars(starNumber) {\n
\n
               &nbsp;&nbsp;&nbsp;// Grab each star and put into list\n
               &nbsp;&nbsp;&nbsp;var stars = $('path')\n
               &nbsp;&nbsp;&nbsp;stars.each(function( index, element ) {\n
\n
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Change the 'd' attribute to fill the color\n
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stars_wrap = $(this).parent().parent()\n
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$( element ).attr('d', colorFilled);\n
\n
                 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Break the loop once on the hovered star\n
                 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( stars_wrap.hasClass(starNumber)) {\n
                   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;\n
                 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n
               &nbsp;&nbsp;&nbsp;});\n
             }\n
\n
             function unHoverStars() {\n
\n
               &nbsp;&nbsp;&nbsp;// Grab each star and put into list\n
               &nbsp;&nbsp;&nbsp;var stars = $('path')\n
\n
               &nbsp;&nbsp;&nbsp;// Change the 'd' attribute to be outlined again\n
               &nbsp;&nbsp;&nbsp;stars.attr('d', colorOutlined);\n
             }\n
\n
             function clickStars(starNumber) {\n
\n
               &nbsp;&nbsp;&nbsp;// Grab each star and put into list\n
               &nbsp;&nbsp;&nbsp;var stars = $('path')\n
               &nbsp;&nbsp;&nbsp;var booleanStar = true\n
\n
                &nbsp;&nbsp;&nbsp;// Go through each star to give its color until it hits the indicated star\n
                &nbsp;&nbsp;&nbsp;stars.each(function( index, element ) {\n
\n
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (booleanStar)\n
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$( element ).attr('d', colorFilled);\n
\n
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stars_wrap = $(this).parent().parent();\n
\n
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Determine if this is the star the user is clicking. Change input field\n
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( stars_wrap.hasClass(starNumber))\n
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n
                       &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rating = $('#rating')\n
                       &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rating.val(starNumber);\n
\n
                       &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;booleanStar = false;\n
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n
\n
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Fill in the rest of the stars with outlines once the class was found\n
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else\n
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$( element ).attr('d', colorOutlined);\n
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n
             &nbsp;&nbsp;&nbsp;});\n
             }
           </code>
           </pre>
           </figure>
           <p>
             Make sure you have linked
             <a href='https://www.w3schools.com/jquery/jquery_get_started.asp' target='_blank'>
               jQuery
             </a>
             in your project.
           </p>
           <p>
             <a href='https://twitter.com/patrik_drean' target='_blank'>
               Reach out
             </a>
             if you have questions.
           </p>
    ",
    "create_date": "2018-04-20T21:40:23.404", #4:24pm 4-20
    "last_modified_date": "2018-04-20T21:43:23.404",
    "filename": "star_review.jpg",
    "alt_text": "five star review in java script",
    "top_post": true,
    "nav_title": "5-Star Review JavaScript",
    "meta_description": "A much prettier way to get a rating from a user using JavaScript.
    This post shows you how to create a five star review using JavaScript, HTML, and CSS.",
    "category": 4
  }
},
{
  "model": "home.blog",
  "pk": 5,
  "fields": {
    "title": "Test-Driven Development Fundamentals",
    "url": "test-driven-development-fundamentals",
    "description": "To test first or not to test first, that is the question.",
    "content": "
          <p>
            Test-driven development (TDD) is a methdology that programmers use to produce
            higher quality code. The 'standard' procedure of coding has always been code first,
            test second. TDD swaps this mindset by focusing on testing first before the actual
            coding happens. This article is a brief overview of the fundamentals with a small
            example of how it works. We will be using python, and more specifically the
            <a href='https://docs.python.org/3/library/unittest.html' target='_blank'>
              unittest
            </a>
            framework provided in the standard python library.
          </p>

          <h2>The Process</h2>
          <p>
            <img class='mx-auto d-block' src='/static/home/media/blog_content/5_tdd_diagram.png' width='400px'/>
          </p>

          <p>
            The diagram shows the high level steps for TDD. Using an example, we'll step through
            each step to show how it would work. If you're unfamiliar with the unittest framework from
            python you can check out this
            <a href='http://pythontesting.net/framework/unittest/unittest-introduction/' target='_blank'>
              tutorial
            </a> for a general overview (or you should be able to pick up a lot of the functionality
            from the comments in the code).
          </p>

          <h2>Example Overview</h2>
          <p>
          We want to create a script that formats a list of street addresses. Using
          TDD, we'll code it to make sure that not only does it work, but also that it
          functions so that the following requirements are met:
          </p>

          <ol class='numbered_list'>
            <li>There are no decimals in the address.</li>
          </ol>

          <h2>Step 1: Write Test</h2>
          <p>
            This first test will check to see if our addresses were successfully loaded
            into the list.
          </p>
          <figure>
            <pre>
            <code class='language-python line-numbers' contenteditable spellcheck='false' ># Import the unittest framework
              \nimport unittest
              \n# Import the code from our script file
              \nfrom my_code_block import *

              \n# Create our own test case class that inherits from the base TestCase class
              \nclass AddressTestCase(unittest.TestCase):

                \n&nbsp;&nbsp;&nbsp;# In unittest, each test function must begin with 'test_'
                \n&nbsp;&nbsp;&nbsp;def test_address_in_list(self):
                    \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# This assert checks that the address is in the list by seeing if it's equal
                    \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.assertEqual(addresses[0], '634 Tomato Way')

                \n# This is to actually run the test
                \nif __name__ == '__main__':
                    \n&nbsp;&nbsp;&nbsp;unittest.main()
            </code>
            </pre>
          </figure>
          <h2>Step 2: Run and Fail Test</h2>
          <p>
            The result is that the test failed, which is obvious as we haven't written anything yet.
          </p>

          <figure>
            <pre>
            <code class='language-python' contenteditable spellcheck='false' >
    $ python my_test.py
    \n======================================================================
    \nERROR: test_address_in_list (__main__.AddressTestCase)
    \n----------------------------------------------------------------------
    \nTraceback (most recent call last):
    \n  File 'blog.py', line 12, in test_address_in_list
    \n    self.assertEqual(addresses[0], '634 Tomato Way')
    \nNameError: name 'addresses' is not defined

    \n----------------------------------------------------------------------
    \nRan 1 test in 0.000s

    \nFAILED (errors=1)
            </code>
            </pre>
          </figure>
          <h2>Step 3: Write Code</h2>
          <p>
            Now we can actually write the code to make it succeed.
          </p>
          <p>
              <span class='note'>Note: </span>
              The code is in a separate .py file we named 'my_code_block.py'.
          </p>

          <figure>
            <pre>
            <code class='language-python line-numbers' contenteditable spellcheck='false' >
              addresses = ['634 Tomato Way', '233 E. 500 S.', '1800 N. Python Lane']
            </code>
            </pre>
          </figure>
          <h2>Step 4: Run and Pass Test</h2>
          <figure>
          <pre>
          <code class='language-python' contenteditable spellcheck='false' >
    $ python my_test.py
    \n----------------------------------------------------------------------

    \nRan 1 test in 0.000s

    \nOK
          </code>
          </pre>
        </figure>

          <h2>Step 5: Refactor Code</h2>
            <p>
              At this point there's not much code to refactor (since there's only one line of it),
              but after doing several tests it's good to take a second to see what pieces of code
              you can consolidate and make more efficient.
            </p>

          <h2>Now repeat!</h2>
            <p>
              We'll now apply the same principles to format the addresses to not have any deciamls in
              any them.
            </p>
          <h2>Step 1: Write Test</h2>
          <figure>
            <pre>
            <code class='language-python line-numbers' contenteditable spellcheck='false' ># Import the unittest framework
              \nimport unittest
              \n# Import the code from our script file
              \nfrom my_code_block import *
\n
              \n# Create our own test case class that inherits from the base TestCase class
              \nclass AddressTestCase(unittest.TestCase):
\n
              \n  # In unittest, each test function must begin with 'test_'
              \n  def test_address_in_list(self):
              \n      # This assert checks that the address is in the list by seeing if it's equal
              \n      self.assertEqual(addresses[0], '634 Tomato Way')
\n
              \n  # ***************** Added decimal test ********************
              \n  def test_decimal(self):
              \n      no_decimals = True
\n
              \n      # This loops through each address to check if it has a decimal in it
              \n      for value in addresses:
              \n          if '.' in value:
              \n              no_decimals = False
\n
              \n      # Run an assert on whether or not there were decimals in one of the addresses.
              \n      self.assertTrue(no_decimals)
\n
              \n  # This is to actually run the test
              \n  if __name__ == '__main__':
              \n      unittest.main()
            </code>
            </pre>
          </figure>
          <h2>Step 2: Run and Fail Test</h2>

          <figure>
            <pre>
            <code class='language-python' contenteditable spellcheck='false' >
    $ python my_test.py
    \n======================================================================
    \nFAIL: test_decimal (__main__.AddressTestCase)
    \n----------------------------------------------------------------------
    \nTraceback (most recent call last):
    \n  File 'blog.py', line 23, in test_decimal
    \n    self.assertTrue(no_decimals)
    \nAssertionError: False is not true
\n
    \n----------------------------------------------------------------------
    \nRan 2 tests in 0.001s
\n
    \nFAILED (failures=1)
            </code>
            </pre>
          </figure>
          <h2>Step 3: Write Code</h2>


          <figure>
            <pre>
            <code class='language-python line-numbers' contenteditable spellcheck='false' >addresses = ['634 Tomato Way', '233 E. 500 S.', '1800 N. Python Lane']
              \nformatted_addresses = []
\n
              \n# Loop to replace '.' with nothing and add to the formatted_addresses list
              \nfor value in addresses:
              \n    value = value.replace('.', '')
              \n    formatted_addresses.append(value)

            </code>
            </pre>
          </figure>
          <h2>Step 4: Run and Pass Test</h2>
          <figure>
          <pre>
          <code class='language-python' contenteditable spellcheck='false' >
    $ python my_test.py
    \n----------------------------------------------------------------------
    \nRan 2 tests in 0.000s
\n
    \nOK
          </code>
          </pre>
        </figure>

          <h2>Step 5: Refactor Code</h2>
          <p>Then just double check for ways to improve your code.</p>
          <h2>Repeat!</h2>
          <p>
            It was hard for me to get my mind around this. It seems backward to my
            nature to test first. But once I did a few projects using this mindset I feel my
            code is much cleaner. TDD allows you to fix problems before they even exist.
          <p>
            <a href='https://twitter.com/patrik_drean' target='_blank'>
              Reach out
            </a>
            if you have questions. Good luck on testing before your coding!
          </p>

          <h2 id='reference_header' >References</h2>
          <a class='align-center' href='https://medium.freecodecamp.org/learning-to-test-with-python-997ace2d8abe'>
            https://medium.freecodecamp.org/learning-to-test-with-python-997ace2d8abe
          </a>

    ",
    "create_date": "2018-04-28T2:40:23.404", #8:24am 4-28
    "last_modified_date": "2018-04-28T2:40:23.404",
    "filename": "test_chalkboard.jpg",
    "alt_text": "the word test on a chalkboard",
    "top_post": true,
    "nav_title": "Test-Driven Development",
    "meta_description": "Test-Driven Development, or TDD, is a methdology used by
    programmers to create higher quality code. ",
    "category": 5
  }
},
{
  "model": "home.blog",
  "pk": 6,
  "fields": {
    "title": "3 Essential Keys to Successful Projects",
    "url": "keys-to-successful-projects",
    "description": "Incorporating one of these principles is great, but having all three is absolute gold.",
    "content": "
<p>
This framework came to me piece by piece and has really changed how I approach any of my projects.
Once I finally put it all together, I was even more pleased to realize that it creates a catchy acronym
(a must for any successful framework, of course). So without further ado, the three key components to a
successful project is <b>CPR -- Content, Presentation, and Reach </b>. CPR doesn’t just apply to a software
project, but it can heavily impact any other project including writing articles, social media marketing,
 creating a resume, or anything else where you want to influence, motivate, and persuade others.
 We’ll break down each component and talk about why it’s important.
</p>
<h2>Content</h2>
<p>
  Content is the actual substance of what you’re doing. No matter how colorful or shiny you make
  something, it has to have at its core something that will add value to the person you are trying
  to influence. We need to ask ourselves these questions: <br /><br />

<i>Is my project just white noise? Or am I creating something that actually has some substance to it? </i><br /><br />

CBinsights
<a href='https://www.cbinsights.com/research/startup-failure-reasons-top/' target='_blank'>recently did a study </a>
  on the top reasons for why startups failed. The number one reason
(by a long shot) was the fact <b>there wasn’t a market need for what the startup was offering. </b>
Those startups may have had a great business model and a slick slide deck for presenting, but
they never got off the ground because they didn’t have the right content that truly added value
to people. <br /><br />

Examples of good Content:
  <ul>
    <li>A blog post with compelling ideas that are more than just “fluff”</li>
    <li>A mobile app that incorporates itself well in users’ daily activities</li>
    <li>A sales product that is actually better than competitors</li>
    <li>Social media posts that don’t just document your life but rather entertain viewers</li>
    <li>Including content on your website that is purely dedicated to helping others (for example, the other day I came across a
        <a href='https://www.namecheap.com/support/knowledgebase/article.aspx/9737/2208/pointing-a-domain-to-the-heroku-app' target='_blank'> tutorial by Namecheap </a>
        that has little to do with their actual service)</li>
  </ul>
</p>

<h2>Presentation</h2>
<p>
Once you have solid content in place, <i>now</i> you can make it shiny. You can have
the most eloquent and profound blog post of all time, but if the font size is 6
pixels big and each paragraph is 40 sentences long, all of its eloquence is wasted.
An example of this idea can be seen by looking at Python’s
<a href='https://docs.python.org/release/1.4/' target='_blank'>earlier documentation.</a>
The docs are chalk full of good content, but it’s packaged in obscure links and bland text that
annoyingly extends to the very edge of the screen. This is an example of how, without
good presentation, users can't take
advantage of the content they’re seeking, even though the content is right there.
Python has greatly enhanced their presentation in
<a href='https://docs.python.org/release/3.6.5/' target='_blank'>later versions</a>. <br /><br />

There are many, many amazing software projects out there. How many of them are
tucked away in some obscure GitHub profile lacking presentation? It’s not enough
to create an exciting project; we also have to facilitate a person’s experience
and make it easy to show <i>why</i> it is an exciting project. <br /><br />

Examples of good Presentation:
<ul>
  <li>Formatting your blog to have appropriate font size, colors, spacing, etc.</li>
  <li>A mobile app that has a sleek logo and a clean home screen</li>
  <li>An easy-to-read instruction guide included with your product</li>
  <li>Improving presentation skills for speeches</li>
</ul>
</p>

<h2>Reach</h2>
<p>
Let’s imagine you buy someone the perfect present, something they’ve really wanted for a long time.
You spend hours wrapping it, making sure all the creases are perfectly folded and,
as a finishing touch, you top it with a beautiful red bow. What happens if after
all your work you just throw the present in your closet and leave it there? Does
it matter that it was the perfect gift? Does it matter it was perfectly wrapped,
even with the beautiful red bow? The present only has value if you’re able to
actually deliver it to the person for whom it was intended. <br /><br />

The mindset of “build it and they’ll come” is the exception, not the rule.
Reach means getting your content out there, whether that be through social media,
Search Engine Optimization (SEO), word of mouth, or some other medium. <br /><br />
Presentation techniques are needed here. The better the presentation, the further the reach.<br /><br />

Examples of good Reach:
<ul>
  <li>Posting blog posts on twitter with appropriate tags</li>
  <li>Creating a referral coupon for your product, incentivizing users to share it with their friends</li>
  <li>Improving SEO on your website to make it easier to be found on Google</li>
  <li>Talking to people about the projects you’re working on</li>
  <li>Making employees in a department aware of a new feature recently developed</li>
</ul>

</p>

<h2>Bringing It All Together</h2>
<p>
Think about any successful project out in the world. Does it have content,
presentation, and reach? Do you think it would be as successful if it was missing one of those pieces?<br /><br />
If you can incorporate just one of these ideas a little bit more, you’ll see a difference.
If you master all three, you’ll be unstoppable.
</p>

<p>
  Feel free to
  <a href='https://twitter.com/patrik_drean' target='_blank'>
  reach out
  </a>
  to discuss this further. Good luck on improving the <b>CPR</b> on your projects!
</p>

    ",
    "create_date": "2018-05-4T17:40:23.404", #4:24pm 4-20
    "last_modified_date": "2018-05-4T17:43:23.404",
    "filename": "red_cross.png",
    "alt_text": "red cross",
    "top_post": true,
    "nav_title": "3 Keys to Projects - CPR",
    "meta_description": "Each successful project needs three things: Content, Presentation,
    and Reach. Incorporating one of these principles is great, but having all three is absolute gold.",
    "category": 3
    }
},
{
  "model": "home.blog",
  "pk": 7,
  "fields": {
    "title": "Fortnite – The Mentorship Parallel ",
    "url": "fortnite-mentorship-parallel",
    "description": "What does the most popular game have in common with learning from others?
    More than you may think.",
    "content": "
     <p>
       Fortnite is a revolutionary open-source game that is free and available for any user to play.
       Despite being free, this cartoon shooter game
       <a href='https://www.forbes.com/sites/insertcoin/2018/04/18/fortnite-is-earning-1m-a-day-on-mobile-players-are-spending-more-time-with-it-than-tinder/#c37aaf3d8371' target='_blank'>
         earns millions of dollars daily.
       </a>
       The overall objective of the game is to be the last man standing out of 100 other players.
     </p>

     <p>
       I’ve recently started playing it as a way to stay in contact with my brothers who
       don’t live nearby. As we’ve played on our dedicated weeknight, my mind has been
       making connections between the game and the role of mentors. Yes, I know I should be
       focued on winning and all of that, but sometimes you need to make professional connections
       while you play, right?
     </p>

     <p>
       (Whether or not you're familiar with Fortnite,
       <a href='https://www.youtube.com/watch?v=TuEpUrQCOkk' target='_blank'>
          this video
        </a>
          gives a short, comical summary of what it is.)
     </p>

     <h2>General Overview of Looting</h2>
     <p>
       Before we talk about the comparisons, let me explain some key things.
       One objective of the game is to loot items so that you’re better equipped
       and have a higher chance of winning. There are two general forms of looting:<br /><br />
1.	Running around and picking up items one-by-one <br />
2.	Eliminating other players and picking up all the items they had <br /><br />
Beating other players is like hitting the jackpot as it allows you to reap the benefits
of the hard work of fellow players. However, both methods are acceptable ways of getting items.
Now, on to making the parallels!
     </p>

     <h2>Lesson 1: Looting One-by-One = Learning on Your Own</h2>

     <p>
       In Fortnite, it can be tiresome to have to run from place to place looking for items.
       In some places you get lucky when you find a rare item, while in others you get the
       same mundane thing over and over again.
     </p>
     <p>
       This can be related to your own individual journey. It’s hard sometimes
       learning something new and unfamiliar. It requires dedication and patience
       to go from one thing to the next. Sometimes you have lots of success and you
       feel you progress dramatically, while other times you feel you’re backpedaling
       and wasting time.
     </p>

     <img class='mx-auto d-block' src='/static/home/media/blog_content/7_looting_alone.jpeg' width='600px'/>

     <h2>Lesson 2:</h2>
     <h3>Part A: Looting through Other Players = Learning from Others</h3>
     <p>The plethora of items you get from a person is exhilarating. Rather than
       having to scour the map for a rare item, somebody’s already done the hard work
       and found it for you. </p>
      <p>This can be applied to the importance of learning from others. Someone
        else has already taken the time to figure something out. Why spend your
        energy running all over the place to explore unknown regions when someone else
        has drawn up the map? Of course, we shouldn’t expect others to drop everything
        they’re working on and take us by the hand every time we start learning something new.
         But they can at least tell us the path
        they’ve followed so that we can retrace their steps.</p>
    <p>  <span class='note'>Note:</span> The one difference when comparing this to Fortnite is that
      this relationship is mutually
      beneficial in real life. The person sharing the information can be benefitted as well.
      There’s no need to eliminate them ;). </p>

      <img class='mx-auto d-block' src='/static/home/media/blog_content/7_looting_others.jpeg' width='600px'/>

      <br /><br />
      <h3>Part B: We Can Learn Something from Anyone</h3>
      <p>In Fortnite, sometimes the people you eliminate haven’t gathered much.
        However, you can still benefit from what they had, such as ammo, resources, etc. </p>
      <p>The same concept is true when dealing with others. Every person has something
        valuable they have to offer. Don’t be deceived by appearances.</p>

      <h2>Both Ways are Good and Necessary</h2>
      <p>
        Just as a player isn’t considered dumb for using both ways of looting,
        we also should realize it’s good to learn through our own merits and from
        the advice of others. Some days you’ll have to hop from place to place
        until you strike gold and on others you’ll learn from someone else that has tread the path already.
      </p>

      <h2>The Bottom Line</h2>
      <p>
        Be patient as you strive to progress and always be open to a friend’s guiding hand.<br /> Then you
        can enjoy your victory!
      </p>

      <img class='mx-auto d-block' src='/static/home/media/blog_content/7_victory.jpeg' width='600px'/>
        ",
    "create_date": "2018-05-14T21:40:23.404", #4:24pm 4-20
    "last_modified_date": "2018-05-14T21:43:23.404",
    "filename": "fortnite_mentorship.jpeg",
    "alt_text": "fortnite game image",
    "top_post": false,
    "nav_title": "Fortnite & Mentorship",
    "meta_description": "What does the most popular game have in common with learning from others?
    Fortnite has many parallels to mentorship. ",
    "category": 3
  }
},
{
  "model": "home.blog",
  "pk": 8,
  "fields": {
    "title": "Selenium - The Python Library",
    "url": "selenium-python-library",
    "description": "This library opens up endless possibilities when web scraping by allowing you to navigate a browser.",
    "content": "
             <p>
               When it comes to web scraping, the library Beautiful Soup is an easy go to.
               However, I recently found myself in a situation where it couldn't do the job
               that I wanted. The information I was hoping to scrape used Ajax to load
               following sets of data. Through my search, I came across the Selenium library
               which allows you to program a script to navigate an internet browser. Below is a
               basic script with an explanation of how key components of the library
               function. The documenation is very good and I've included it below for more
               details.
             </p>
             <h2>Prerequisites</h2>
             <figure>
               <pre>
               <code class='language-python' contenteditable spellcheck='false' >pip install selenium
               </code>
               </pre>
             </figure>
             <p>Depending on the website browser you choose to use, you'll have to follow
               <a href='http://selenium-python.readthedocs.io/installation.html' target='_blank'>
                 certain steps
               </a> before you can start using Selenium.
             </p>
             <h2>Selenium Script</h2>
             <figure>
               <pre>
               <code class='language-python line-numbers' contenteditable spellcheck='false' >
                 # Import various components to be used later
                 \nfrom selenium import webdriver
                 \nfrom selenium.webdriver.support.ui import WebDriverWait, Select
                 \nfrom selenium.webdriver.common.by import By
                 \nfrom selenium.webdriver.support import expected_conditions as EC
                 \nfrom selenium.common.exceptions import NoSuchElementException, StaleElementReferenceException, TimeoutException
\n
\n
                 \n#********************* Navigate Websites *********************#
\n
                 \n# Open firefox browser.
                 \ndriver = webdriver.Firefox()
\n
                 \n# Navigate to desired URL
                 \ndriver.get(\"http://www.duckcode.me/\")
\n
                 \n# Click a button based on the text it has
                 \nbutton = driver.find_element_by_xpath(\"//*[contains(text(), 'All Posts')]\")
                 \nbutton.click()
\n
                 \n# Wait for at least 10 seconds for the element with this class name to appear before moving on.
                 \nclass_button = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CLASS_NAME, 'category_blog_div')))
                 \nclass_button.click()
\n
                 \n# You can also find elements by id. See the docs for all the different options.
                 \nid_button = driver.find_element_by_id(\"duck_logo\")
                 \nid_button.click()
\n
                 \n#************************ Submit Forms ***********************#
\n
                 \n# Navigate to desired URL
                 \ndriver.get(\"https://twitter.com\")
\n
                 \n# Prompt for login info
                 \nusername = input('Enter username:')
                 \npassword = input('Enter password:')
\n
                 \n# Grab inputs
                 \nusername_input = driver.find_element_by_name(\"session[username_or_email]\")
                 \npassword_input = driver.find_element_by_name(\"session[password]\")
\n
                 \n# Enter values
                 \nusername_input.clear()
                 \nusername_input.send_keys(username)
\n
                 \npassword_input.clear()
                 \npassword_input.send_keys(password)
\n
                 \n# Submit form
                 \nusername_input.submit()
               </code>
               </pre>
             </figure>

             <h2 id='reference_header' >References</h2>
             <a class='align-center' href='http://selenium-python.readthedocs.io/index.html'>
               http://selenium-python.readthedocs.io/index.html
             </a>
        ",
    "create_date": "2018-05-28T21:40:23.404", #4:24pm 4-20
    "last_modified_date": "2018-05-28T21:43:23.404",
    "filename": "selenium_python.jpeg",
    "alt_text": "a spider web for selenium",
    "top_post": false,
    "nav_title": "Selenium Python Library",
    "meta_description": "The Selenium Python library opens up endless possibilities when web scraping by allowing you to navigate a browser.",
    "category": 1
  }
},
{
  "model": "home.blog",
  "pk": 9,
  "fields": {
    "title": "Raise the <del>Roof</del> Exception",
    "url": "raise-the-exception",
    "description": "No matter how much you may trust your program or users, there will always be a need for exceptions.",
    "content": "
         <p>
           When I was first starting to code, my only objective was to make my program work.
           That task was already quite the challenge for me. I didn't have much remaining mental power
           to ask questions like \"What if my user inputted something wrong?\", or \"What if my program times out?\"
           I was perfectly content assuming that my end user was a perfectly behaved person who knew
           exactly how my program worked.
         </p>
         <p>
           I was very intimidated when I got to the point where I had to bring exceptions into the
           picture. I still remember the frightening day a few years ago when my professor introduced
           us to a \"try/catch\" phrase in C#. It seemed so abstract to me. But over time I've realized that
           there's nothing to be scared of. Exceptions make a lot of sense if broken down properly. We will
           took a look at the general structure of an exception in Python to make it less terrifying for everyone.
         </p>
         <h2>What is an Exception?</h2>
         <p>
           It's pretty straightforward. <span class='note'>Exception = Error</span>
         </p>
         <p>
           That's it. \"Raising an exception\" just means that a specific error has occured
           and we'll handle it in a certain way depending on the type of error it is. There
           are many different types, such as an error when the program divides by zero or an error where the
           index indicated in a list is out of bounds. Here is a
           <a href='https://www.tutorialspoint.com/python/standard_exceptions.htm' target='_blank'>
             list of common exceptions</a>.
         </p>

         <h2>Python Example</h2>
         <figure>
         <pre>
         <code class='language-python line-numbers' contenteditable spellcheck='false' ># Declare a generic list
           \nmy_list = [0, 1, 2, 3]
\n
           \n# The 'try' block is used on your normal code. This is where you place
           \n# code that you think has the potential to break. The hope is that it
           \n# doesn't break, but if it does, you'll be prepared to handle the error.
           \ntry:
           \n    my_value = my_list[4]
\n
           \n# The 'except' block is where you actually handle the error. In this case,
           \n# we're catching an 'IndexError'. Because there's nothing in the 4th position
           \n# in our list, this exception will be raised and the code below will print.
           \nexcept IndexError:
           \n    print('You did done mess up the index.')
\n
           \n# Multiple 'except' blocks can follow a 'try' block. In this case, the
           \n# 'ZeroDivisionError' exception will not be raised and the code below
           \n#  will not execute.
           \nexcept ZeroDivisionError:
           \n    print('This will not print in this case.')
\n
           \n# A 'finally' block is optional and not used too often. This code block will
           \n# be exceucted whether or not an exception was raised.
           \nfinally:
           \n    print('This line will print no matter what.')

         </code>
         </pre>
        </figure>
        <h2 class='reference_header'>References</h2>
        <a class='align-center' href='http://www.pythonforbeginners.com/error-handling/exception-handling-in-python'>
          http://www.pythonforbeginners.com/error-handling/exception-handling-in-python
        </a>

        ",
    "create_date": "2018-06-04T21:40:23.404", #4:24pm 4-20
    "last_modified_date": "2018-06-04T21:43:23.404",
    "filename": "raise_the_exception.jpg",
    "alt_text": "a hand raising an error sign.",
    "top_post": false,
    "nav_title": "Raise the Exception",
    "meta_description": "No matter how much you may trust your program or users, there will always be a need for exceptions in programming.",
    "category": 1
  }
},
{
  "model": "home.blog",
  "pk": 10,
  "fields": {
    "title": "Building Desktop and Mobile Apps with Kivy",
    "url": "building-apps-with-kivy",
    "description": "Kivy is a modern Python framework that allows you to create apps for various operating systems.",
    "content": "
           <p>
           One of the most beautiful things in development is when a program functions
           across multiple platforms. The Python framework Kivy allows a developer to create apps
           that run on Linux, Windows, OS X, Android, iOS, and Raspberry Pi. If that's not
           a beautiful thing then I don't know what is.
          </p>

          <p>
            Most applications in the modern world are run as website applications. However,
            the need to program a desktop or mobile app is not obsolete quite yet. The Kivy
            framework provides a nice, easy way to put together such an app.
          </p>

          <h2>Initial Setup</h2>
          <p>
            Follow the
            <a href='https://kivy.org/docs/gettingstarted/installation.html' target='_blank'>installation instructions
            </a>
            to be sure you're ready to begin.
          </p>

          <h2>Kivy Overview</h2>
          <p>
            A Kivy project has two general parts to it. The <b>.py</b> files are where the logic and
            general structure of the program resides. The <b>.kv</b> files are the central location
            for designing the look of the project.
          </p>
          <p>
            Below is an example project with a .py file and a .kv file.
            </p>
            <p> (Kivy has a good
            <a href='https://kivy.org/docs/gettingstarted/intro.html' target='_blank'>getting started guide</a>
            as well).
          </p>

          <h2>File Structure for the Example Project</h2>
          <p>
            <img class='mx-auto d-block' src='/static/home/media/blog_content/9_kivy_project_structure.png' width='400px'/>
          </p>

          <h2>example.py</h2>
          <figure>
            <pre>
            <code class='language-python line-numbers' contenteditable spellcheck='false' >from kivy.app import App
              \nfrom kivy.uix.widget import Widget
              \nfrom kivy.uix.image import Image
              \nfrom kivy.core.window import Window
\n
              \n#/////////////////////////////////////////////////////////////////#
              \n#// In this section we manipulate the actual window of the app. //#
              \n#// See docs for more capabilities                              //#
              \n#/////////////////////////////////////////////////////////////////#
\n
              \n# Set initial window size
              \nWindow.size = (700, 350)
\n
              \n# Turn off ability to exit screen
              \nWindow.borderless = True
\n
              \n# Turn background clear
              \nWindow.clearcolor = (1, 1, 1, 1)
\n
              \n#////////////////////////////////////#
              \n#// Function to print out response //#
              \n#////////////////////////////////////#
\n
              \ndef printout_feeling(feeling_response):
\n
              \n    # Printout the response once button is pushed
              \n    print('I am feeling very {}'.format(feeling_response))
\n
\n
              \n#//////////////////////////////////////////////////////////////////#
              \n#// In this section we define the widgets that will be displayed //#
              \n#//////////////////////////////////////////////////////////////////#
\n
              \n# A happy image that is designed further in the .kv file
              \nclass SadFaceWidget(Image):
\n
              \n    # This function is called when this widget is pressed
              \n    def on_touch_down(self, touch):
              \n        if self.collide_point(*touch.pos):
              \n            printout_feeling('sad..')
\n
              \n# A sad image that is designed further in the .kv file
              \nclass HappyFaceWidget(Image):
\n
              \n    # This function is called when this widget is pressed
              \n    def on_touch_down(self, touch):
              \n        if self.collide_point(*touch.pos):
              \n            printout_feeling('happy!!')
\n
\n
              \n# Base root widget that is the parent of the two face widgets
              \nclass RootWidget(Widget):
              \n    pass
\n
              \n# This is the actual app class
              \nclass ExampleApp(App):
\n
              \n    # This builds the rootwidget as the base of the app
              \n    def build(self):
              \n        return RootWidget()
\n
              \n#///////////////////#
              \n#// Start the app //#
              \n#///////////////////#
\n
              \nif __name__ == '__main__':
              \n    ExampleApp().run()

            </code>
            </pre>
          </figure>

          <h2>example.kv</h2>

          <figure>
          <pre>
          <code class='language-python line-numbers' contenteditable spellcheck='false' ># Indicate the version number
            \n#:kivy 1.0.9
\n
            \n# Customize the SadFaceWidget that was declared in the .py file with the
            \n# following attributes
            \n&lt;SadFaceWidget&gt;
            \n    size: 200, 200
            \n    source: 'images/sad_face.png'
\n
            \n# Customize the HappyFaceWidget that was declared in the .py file with the
            \n# following attributes
            \n&lt;HappyFaceWidget&gt;
            \n    size: 200, 200
            \n    source: 'images/happy_face.png'
\n
            \n# Customize the RootWidget that was declared in the .py file
            \n&lt;RootWidget&gt;
\n
            \n    # Add a label text field with the following attributes
            \n    Label:
            \n        font_size: 50
            \n        center_x: root.width / 2
            \n        top: root.top - 50
            \n        text: 'How are you feeling today?'
            \n        color: 0,0,0,1
\n
            \n    # Place the actual face widgets on the RootWidget and indicate their position
            \n    SadFaceWidget:
            \n        pos: ((root.width / 5) * 1) + (root.width / 28) , root.top - 500
\n
            \n    HappyFaceWidget:
            \n        pos: ((root.width / 5) * 3) + (root.width / 28), root.top - 500
\n
          </code>
          </pre>
          </figure>

          <h2>Run it</h2>
          <p>
            Run the following in the terminal in the directory of the project.
            <figure>
            <pre>
            <code class='language-python ' contenteditable spellcheck='false' >
            python example.py
            </code>
            </pre>
          </figure>
          </p>
          <h2>Final Product</h2>
          <p>This is what it should look like.</p>
          <img class='mx-auto d-block' src='/static/home/media/blog_content/9_kivy_final_product.png' width='400px'/>
          <br />
          <p>And that's it! I highly encourage you to check out the
            <a href='https://kivy.org/docs/' target='_blank'>
              Kivy docs
            </a> to continue learning to see what else you can do with Kivy.
          </p>
          <p>
             Also, feel free to
          <a href='https://twitter.com/patrik_drean' target='_blank'>reach out to me on Twitter
          </a> for further questions.
          </p>


        ",
    "create_date": "2018-06-15T21:40:23.404", #4:24pm 4-20
    "last_modified_date": "2018-06-15T21:43:23.404",
    "filename": "kivy_example.jpg",
    "alt_text": "example of kivy apps",
    "top_post": false,
    "nav_title": "Build Apps with Kivy",
    "meta_description": "Kivy is a modern Python framework that allows you to
    create apps for various operating systems including windows, mac, android, etc.",
    "category": 1
  }
},
{
  "model": "home.blog",
  "pk": 11,
  "fields": {
    "title": "Working with csv Files in Python",
    "url": "csv-files-python",
    "description": "Python is one of the most powerful ways to work with spreadsheets.",
    "content": "
<p>
  Python is a very powerful tool when it comes to spreadsheets. Although there exist multiple libraries that
  aide in working with csv files, Python comes with a standard library to do basic functions. The purpose
  of this article is to introduce some key features of this library in order to get your feet a little wet.
  Feel free to
<a href='https://twitter.com/patrik_drean' target='_blank'>reach out to me on Twitter
</a> for further questions.
</p>
</p>

<figure>
<pre>
<code class='language-python line-numbers' contenteditable spellcheck='false' ># The 'csv' library is part of the standard python library
  \nimport csv
\n
  \n#################################################################
  \n################### Writing to a csv file #######################
  \n#################################################################
\n
  \n# The 'with' statement automatically closes the connection to the file
  \n# once with code block has finished.
  \n# The 'w' parameter indicates that we'll be writing a new file from scratch
  \n# or overwriting the exisiting file
  \nwith open('example_csv_file.csv', 'w') as csvfile:
\n
  \n    # Create a writer that allows us to write new informatio to the csv file
  \n    writer = csv.writer(csvfile)
\n
  \n    # Write one new row to the file
  \n    new_row = ['data 1', 'data 2', 'data 3']
  \n    writer.writerow(new_row)
\n
  \n# The 'a' parameter allows you to append to a file
  \nwith open('example_csv_file.csv', 'a') as csvfile:
\n
  \n    writer = csv.writer(csvfile)
\n
  \n    # Append a row to the file
  \n    appended_row = ['data 4', 'data 5', 'data 6']
  \n    writer.writerow(appended_row)
\n
  \n###### You can also specify headers for a csv file with a 'DictWriter' ######
\n
  \nwith open('header_example_file.csv', 'w') as csvfile:
\n
  \n    # List out the header fields
  \n    header_fields = [
  \n        'header 1',
  \n        'header 2',
  \n        'header 3',
  \n        ]
\n
  \n    # User the 'DictWriter' instead of the normal 'writer'.
  \n    # Indicate the headers as a parameter
  \n    writer = csv.DictWriter(csvfile, fieldnames=header_fields)
\n
  \n    # Write the actual headers to the csv file
  \n    writer.writeheader()
\n
  \n    # Write a normal row under the headers
  \n    writer.writerow({
  \n        'header 1': 'data 1',
  \n        'header 2': 'data 2',
  \n        'header 3': 'data 3',
  \n        })
\n
\n
  \n###################################################################
  \n################### Reading from a csv file #######################
  \n###################################################################
\n
  \n# No parameter is needed as the action to read is the default
  \nwith open('example_csv_file.csv') as csvfile:
\n
  \n    # The 'reader' allows you to actually read the file
  \n    reader = csv.reader(csvfile)
\n
  \n    # Read row by row and print the first cell in that row
  \n    for row in reader:
  \n        print(row[0])
\n

</code>
</pre>
</figure>

<h2 id='reference_header' >References</h2>
<a class='align-center' href='https://docs.python.org/3/library/csv.html'>
  https://docs.python.org/3/library/csv.html
</a>

        ",
    "create_date": "2018-07-14T21:40:23.404",
    "last_modified_date": "2018-07-14T21:43:23.404",
    "filename": "excel_collage.jpg",
    "alt_text": "collage of microsoft excel logos",
    "top_post": true,
    "nav_title": "CSV Files with Python",
    "meta_description": "Learn how to manipulate csv files with Python.
    Python is one of the most powerful ways to work with spreadsheets.",
    "category": 1
  }
},
{
  "model": "home.blog",
  "pk": 12,
  "fields": {
    "title": "Python Scheduled Tasks",
    "url": "python-automatic-scheduled-tasks",
    "description": "Why do something manually when you it can happen automatically?",
    "content": "
     <p>
       Automatic scripts that run on a schedule can be hugely beneficial to anyone.
       The Python \"schedule\" library is an easy and intuitive option to make this a reality. Listed
       below are some good examples on how to successfully set a scheduled task.
     </p>

     <h2>Initial Setup</h2>

     <p>Run the following in terminal (Learn about pip
        <a href='http://www.pythonforbeginners.com/pip/' target='_blank'>here</a>):
    </p>

        <figure>
          <pre>
               <code class='language-python' contenteditable spellcheck='false' >pip install schedule</code>
               </pre>
        </figure>
      </p>

      <h2 class='small_margin'>Examples</h2>

     <figure>
      <pre>
      <code class='language-python line-numbers' contenteditable spellcheck='false' >import schedule
        \nimport time
\n
        \n######################################################
        \n############ Setting the scheduled tasks #############
        \n######################################################
\n
        \n# Function that will be called at a certain time
        \ndef print_something():
        \n    print('I am something')
\n
        \n# Every 5 minutes run the function
        \nschedule.every(5).minutes.do(print_something)
\n
        \n# Every hour run the function
        \nschedule.every().hour.do(print_something)
\n
        \n# Every day at 9:30am run the function
        \nschedule.every().day.at('9:30').do(print_something)
\n
        \n# Every friday at 2:15pm run the function
        \nschedule.every().friday.at('14:15').do(print_something)
\n
\n
        \n######################################################
        \n###### Setting scheduled tasks with parameters #######
        \n######################################################
\n
        \n# Function with a paremter
        \ndef print_my_language(language):
        \n    print('My language is {}'.format(language))
\n
        \n# Function that passes a parameter
        \nschedule.every(1).minutes.do(print_my_language, 'English')
\n
\n
        \n##################################################################
        \n### Run endless loop to check for and then run scheduled tasks ###
        \n##################################################################
\n
        \nwhile True:
\n
        \n    # This runs any of the tasks
        \n    schedule.run_pending()
\n
        \n    # This will pause for 30 seconds before continuing
        \n    time.sleep(30)
\n
      </code>
      </pre>
      </figure>
      <p>
        <a href='https://twitter.com/patrik_drean' target='_blank'>
          Reach out
        </a>
        if you have questions.
      </p>

      <h2 id='reference_header' >References</h2>
      <a class='align-center' href='http://schedule.readthedocs.io/en/stable/'>
        http://schedule.readthedocs.io/en/stable/
      </a>

        ",
    "create_date": "2018-07-19T19:40:23.404",
    "last_modified_date": "2018-07-19T19:43:23.404",
    "filename": "schedule_tasks.jpg",
    "alt_text": "a desk showing journals and calendars",
    "top_post": false,
    "nav_title": "Python Scheduled Tasks",
    "meta_description": "Why do something manually when you it can happen automatically? The schedule
    library in Python",
    "category": 1
  }
},
{
  "model": "home.blog",
  "pk": 13,
  "fields": {
    "title": "Run C++ in the Terminal",
    "url": "c-plus-plus-in-terminal",
    "description": "Learn how to easily run a C++ file in the terminal while getting some exposure to C++ syntax",
    "content": "
           <p>
             You may think C++ is an ancient art, but there are plenty of modern day uses of the language.
             Many people feel strongly that
             <a href='https://www.youtube.com/watch?v=7xVrYnyQ04M' target='_blank'>C++ is still as applicable as ever</a>.
             This article is to show you how to execute a C++ file in terminal and give you a feel of the
             programming language's syntax.
           </p>

           <h2>Code Example</h2>

           <figure>
             <pre>
                  <code class='language-java line-numbers' contenteditable spellcheck='false' >// Import library
      \n#include &lt;iostream&gt;
      \nusing namespace std;
\n
      \n// This is the main function. It returns '0' just as a standard.
      \nint main()
      \n{
      \n  int number;
\n
      \n  // Write to console
      \n  cout << \"Enter a number between 1 and 10: \";
\n
      \n  // Assign input to the variable
      \n  cin >> number;
\n
      \n  // Output
      \n  cout << \"The value you entered is \" << number;
\n
      \n  return 0;
      \n}

                  </code>
                  </pre>
           </figure>

           <h2>Running a C++ file</h2>
           <p>After navigating to the appropriate folder in the terminal, run the following command.</p>

           <figure>
             <pre>
                  <code class='language-python' contenteditable spellcheck='false' >g++ your_file_name.cpp</code>
                  </pre>
           </figure>

           <p>This will create a new executable file named \"a.out\". The following command will actually run the program.</p>

           <figure>
             <pre>
                  <code class='language-python' contenteditable spellcheck='false' >./a.out out</code>
                  </pre>
           </figure>

           <p>
             And that's that! This was just a small taste of C++ to help you decide if
             there's something in it worth pursuing.
             <a href='https://twitter.com/patrik_drean' target='_blank'>
               Reach out
             </a>
               for questions or ideas you may have.
           </p>

                   <h2 id='reference_header' >References</h2>
                   <a class='align-center' target='_blank' href='http://www.cplusplus.com/doc/tutorial/introduction/'>
                     http://www.cplusplus.com/doc/tutorial/introduction/
                   </a>
        ",
    "create_date": "2018-07-27T21:40:23.404", #4:24pm 4-20
    "last_modified_date": "2018-07-27T21:43:23.404",
    "filename": "c_plus_plus_code.jpg",
    "alt_text": "C plus plus code.",
    "top_post": false,
    "nav_title": "C++ in Terminal",
    "meta_description": "Learn how to easily run a C++ file in the terminal while getting some exposure to C++ syntax.",
    "category": 6
  }
}

]
##################### Example ###########################
# {
#   "model": "home.blog",
#   "pk": 5,
#   "fields": {
#     "title": "Test Driven Development - Fundamentals",
#     "url": "test-driven-development-fundamentals",
#     "description": "This is something basic we all learn at fast, but is it really that easy?",
#     "content": "
#         Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod
#         vulputate ut pharetra sit.
#         ",
#     "create_date": "2018-04-20T21:40:23.404", #4:24pm 4-20
#     "last_modified_date": "2018-04-20T21:43:23.404",
#     "filename": "star_review.jpg",
#     "alt_text": "five star review in java script",
#     "top_post": true,
#     "nav_title": "5-Star Review JavaScript",
#     "meta_description": "A much prettier way to get a rating from a user using JavaScript.
#     This post shows you how to create a five star review using JavaScript, HTML, and CSS.",
#     "category": 4
#   }
# }
